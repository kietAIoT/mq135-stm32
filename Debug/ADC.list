
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800344c  0800344c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800344c  0800344c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800344c  0800344c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000068  080034bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080034bc  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006519  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bbd  00000000  00000000  000265ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000281b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000516  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180c9  00000000  00000000  00028db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009239  00000000  00000000  00040e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086aea  00000000  00000000  0004a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002140  00000000  00000000  000d0ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d2ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080033a0 	.word	0x080033a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080033a0 	.word	0x080033a0

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc_value = 0;
int _write(int file, char *ptr, int len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fab8 	bl	8000748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f824 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8da 	bl	8000394 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f8ba 	bl	8000358 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e4:	f000 f87a 	bl	80002dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADCEx_Calibration_Start(&hadc1);
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <main+0x44>)
 80001ea:	f000 feff 	bl	8000fec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_value,1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	4909      	ldr	r1, [pc, #36]	; (8000218 <main+0x48>)
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <main+0x44>)
 80001f4:	f000 fc06 	bl	8000a04 <HAL_ADC_Start_DMA>
  printf("Begin");
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0x4c>)
 80001fa:	f002 fa55 	bl	80026a8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Value of adc is %lu\n",adc_value);
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <main+0x48>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4619      	mov	r1, r3
 8000204:	4806      	ldr	r0, [pc, #24]	; (8000220 <main+0x50>)
 8000206:	f002 fa4f 	bl	80026a8 <iprintf>
	  HAL_Delay(500);
 800020a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020e:	f000 fafd 	bl	800080c <HAL_Delay>
	  printf("Value of adc is %lu\n",adc_value);
 8000212:	e7f4      	b.n	80001fe <main+0x2e>
 8000214:	20000084 	.word	0x20000084
 8000218:	200000f8 	.word	0x200000f8
 800021c:	080033b8 	.word	0x080033b8
 8000220:	080033c0 	.word	0x080033c0

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b094      	sub	sp, #80	; 0x50
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fa8d 	bl	8002752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000270:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fbfc 	bl	8001a78 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000286:	f000 f8dd 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fe68 	bl	8001f7c <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b2:	f000 f8c7 	bl	8000444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b6:	2302      	movs	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 ffd4 	bl	8002270 <HAL_RCCEx_PeriphCLKConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ce:	f000 f8b9 	bl	8000444 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3750      	adds	r7, #80	; 0x50
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_ADC1_Init+0x74>)
 80002ee:	4a19      	ldr	r2, [pc, #100]	; (8000354 <MX_ADC1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_ADC1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_ADC1_Init+0x74>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_ADC1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_ADC1_Init+0x74>)
 8000306:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_ADC1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_ADC1_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_ADC1_Init+0x74>)
 800031a:	f000 fa9b 	bl	8000854 <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 f88e 	bl	8000444 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000330:	2306      	movs	r3, #6
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_ADC1_Init+0x74>)
 800033a:	f000 fc5d 	bl	8000bf8 <HAL_ADC_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000344:	f000 f87e 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000084 	.word	0x20000084
 8000354:	40012400 	.word	0x40012400

08000358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_DMA_Init+0x38>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <MX_DMA_Init+0x38>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_DMA_Init+0x38>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	200b      	movs	r0, #11
 800037c:	f000 ffbb 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000380:	200b      	movs	r0, #11
 8000382:	f000 ffd4 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a23      	ldr	r2, [pc, #140]	; (800043c <MX_GPIO_Init+0xa8>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b21      	ldr	r3, [pc, #132]	; (800043c <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0310 	and.w	r3, r3, #16
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	; (800043c <MX_GPIO_Init+0xa8>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_GPIO_Init+0xa8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0320 	and.w	r3, r3, #32
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_GPIO_Init+0xa8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <MX_GPIO_Init+0xa8>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_GPIO_Init+0xa8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_GPIO_Init+0xa8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	; (800043c <MX_GPIO_Init+0xa8>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_GPIO_Init+0xa8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <MX_GPIO_Init+0xac>)
 8000410:	f001 fb1a 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_GPIO_Init+0xac>)
 800042e:	f001 f987 	bl	8001740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a14      	ldr	r2, [pc, #80]	; (80004ac <HAL_MspInit+0x5c>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x5c>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <HAL_MspInit+0x60>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_MspInit+0x60>)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010000 	.word	0x40010000

080004b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a28      	ldr	r2, [pc, #160]	; (8000570 <HAL_ADC_MspInit+0xbc>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d149      	bne.n	8000568 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d4:	4b27      	ldr	r3, [pc, #156]	; (8000574 <HAL_ADC_MspInit+0xc0>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a26      	ldr	r2, [pc, #152]	; (8000574 <HAL_ADC_MspInit+0xc0>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <HAL_ADC_MspInit+0xc0>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <HAL_ADC_MspInit+0xc0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a20      	ldr	r2, [pc, #128]	; (8000574 <HAL_ADC_MspInit+0xc0>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <HAL_ADC_MspInit+0xc0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000504:	2301      	movs	r3, #1
 8000506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000508:	2303      	movs	r3, #3
 800050a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4819      	ldr	r0, [pc, #100]	; (8000578 <HAL_ADC_MspInit+0xc4>)
 8000514:	f001 f914 	bl	8001740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <HAL_ADC_MspInit+0xc8>)
 800051a:	4a19      	ldr	r2, [pc, #100]	; (8000580 <HAL_ADC_MspInit+0xcc>)
 800051c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_ADC_MspInit+0xc8>)
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000536:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_ADC_MspInit+0xc8>)
 800053a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000542:	2220      	movs	r2, #32
 8000544:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000548:	2200      	movs	r2, #0
 800054a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <HAL_ADC_MspInit+0xc8>)
 800054e:	f000 ff09 	bl	8001364 <HAL_DMA_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000558:	f7ff ff74 	bl	8000444 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000560:	621a      	str	r2, [r3, #32]
 8000562:	4a06      	ldr	r2, [pc, #24]	; (800057c <HAL_ADC_MspInit+0xc8>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40012400 	.word	0x40012400
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800
 800057c:	200000b4 	.word	0x200000b4
 8000580:	40020008 	.word	0x40020008

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f903 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <DMA1_Channel1_IRQHandler+0x10>)
 80005da:	f000 ff7d 	bl	80014d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000b4 	.word	0x200000b4

080005e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e00a      	b.n	8000610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005fa:	f3af 8000 	nop.w
 80005fe:	4601      	mov	r1, r0
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf0      	blt.n	80005fa <_read+0x12>
  }

  return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000648:	605a      	str	r2, [r3, #4]
  return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <_isatty>:

int _isatty(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
	...

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f002 f89c 	bl	80027f0 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20005000 	.word	0x20005000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	200000fc 	.word	0x200000fc
 80006ec:	20000250 	.word	0x20000250

080006f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006fc:	f7ff fff8 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000702:	490c      	ldr	r1, [pc, #48]	; (8000734 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000718:	4c09      	ldr	r4, [pc, #36]	; (8000740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f002 f869 	bl	80027fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fd51 	bl	80001d0 <main>
  bx lr
 800072e:	4770      	bx	lr
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000738:	08003454 	.word	0x08003454
  ldr r2, =_sbss
 800073c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000740:	20000250 	.word	0x20000250

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 fdc1 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff fe74 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fdd9 	bl	800134a <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 fda1 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000100 	.word	0x20000100

080007f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000100 	.word	0x20000100

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff fff0 	bl	80007f8 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Delay+0x44>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4413      	add	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000832:	bf00      	nop
 8000834:	f7ff ffe0 	bl	80007f8 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008

08000854 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d101      	bne.n	8000876 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e0be      	b.n	80009f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	2b00      	cmp	r3, #0
 8000882:	d109      	bne.n	8000898 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fe0e 	bl	80004b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 faff 	bl	8000e9c <ADC_ConversionStop_Disable>
 800089e:	4603      	mov	r3, r0
 80008a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f040 8099 	bne.w	80009e2 <HAL_ADC_Init+0x18e>
 80008b0:	7dfb      	ldrb	r3, [r7, #23]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8095 	bne.w	80009e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008c0:	f023 0302 	bic.w	r3, r3, #2
 80008c4:	f043 0202 	orr.w	r2, r3, #2
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7b1b      	ldrb	r3, [r3, #12]
 80008da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ec:	d003      	beq.n	80008f6 <HAL_ADC_Init+0xa2>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d102      	bne.n	80008fc <HAL_ADC_Init+0xa8>
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	e000      	b.n	80008fe <HAL_ADC_Init+0xaa>
 80008fc:	2300      	movs	r3, #0
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7d1b      	ldrb	r3, [r3, #20]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d119      	bne.n	8000940 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7b1b      	ldrb	r3, [r3, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	3b01      	subs	r3, #1
 800091a:	035a      	lsls	r2, r3, #13
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	e00b      	b.n	8000940 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092c:	f043 0220 	orr.w	r2, r3, #32
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	f043 0201 	orr.w	r2, r3, #1
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	430a      	orrs	r2, r1
 8000952:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <HAL_ADC_Init+0x1a8>)
 800095c:	4013      	ands	r3, r2
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	430b      	orrs	r3, r1
 8000966:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000970:	d003      	beq.n	800097a <HAL_ADC_Init+0x126>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d104      	bne.n	8000984 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	3b01      	subs	r3, #1
 8000980:	051b      	lsls	r3, r3, #20
 8000982:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	430a      	orrs	r2, r1
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_ADC_Init+0x1ac>)
 80009a0:	4013      	ands	r3, r2
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d10b      	bne.n	80009c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f023 0303 	bic.w	r3, r3, #3
 80009b6:	f043 0201 	orr.w	r2, r3, #1
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009be:	e018      	b.n	80009f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	f023 0312 	bic.w	r3, r3, #18
 80009c8:	f043 0210 	orr.w	r2, r3, #16
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d4:	f043 0201 	orr.w	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009e0:	e007      	b.n	80009f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f043 0210 	orr.w	r2, r3, #16
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000a00:	ff1f0efe 	.word	0xff1f0efe

08000a04 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a64      	ldr	r2, [pc, #400]	; (8000bac <HAL_ADC_Start_DMA+0x1a8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d004      	beq.n	8000a28 <HAL_ADC_Start_DMA+0x24>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a63      	ldr	r2, [pc, #396]	; (8000bb0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <HAL_ADC_Start_DMA+0x32>
 8000a28:	4b60      	ldr	r3, [pc, #384]	; (8000bac <HAL_ADC_Start_DMA+0x1a8>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f040 80b3 	bne.w	8000b9c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d101      	bne.n	8000a44 <HAL_ADC_Start_DMA+0x40>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e0ae      	b.n	8000ba2 <HAL_ADC_Start_DMA+0x19e>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f000 f9cb 	bl	8000de8 <ADC_Enable>
 8000a52:	4603      	mov	r3, r0
 8000a54:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f040 809a 	bne.w	8000b92 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a66:	f023 0301 	bic.w	r3, r3, #1
 8000a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a4e      	ldr	r2, [pc, #312]	; (8000bb0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d105      	bne.n	8000a88 <HAL_ADC_Start_DMA+0x84>
 8000a7c:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <HAL_ADC_Start_DMA+0x1a8>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d115      	bne.n	8000ab4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d026      	beq.n	8000af0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ab2:	e01d      	b.n	8000af0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a39      	ldr	r2, [pc, #228]	; (8000bac <HAL_ADC_Start_DMA+0x1a8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d004      	beq.n	8000ad4 <HAL_ADC_Start_DMA+0xd0>
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a38      	ldr	r2, [pc, #224]	; (8000bb0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d10d      	bne.n	8000af0 <HAL_ADC_Start_DMA+0xec>
 8000ad4:	4b35      	ldr	r3, [pc, #212]	; (8000bac <HAL_ADC_Start_DMA+0x1a8>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d007      	beq.n	8000af0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b00:	f023 0206 	bic.w	r2, r3, #6
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b08:	e002      	b.n	8000b10 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_ADC_Start_DMA+0x1b0>)
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <HAL_ADC_Start_DMA+0x1b4>)
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <HAL_ADC_Start_DMA+0x1b8>)
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f06f 0202 	mvn.w	r2, #2
 8000b38:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b48:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a18      	ldr	r0, [r3, #32]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	334c      	adds	r3, #76	; 0x4c
 8000b54:	4619      	mov	r1, r3
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f000 fc5d 	bl	8001418 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b68:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b6c:	d108      	bne.n	8000b80 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b7c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b7e:	e00f      	b.n	8000ba0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b8e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b90:	e006      	b.n	8000ba0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000b9a:	e001      	b.n	8000ba0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40012400 	.word	0x40012400
 8000bb0:	40012800 	.word	0x40012800
 8000bb4:	08000f1f 	.word	0x08000f1f
 8000bb8:	08000f9b 	.word	0x08000f9b
 8000bbc:	08000fb7 	.word	0x08000fb7

08000bc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d101      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x20>
 8000c14:	2302      	movs	r3, #2
 8000c16:	e0dc      	b.n	8000dd2 <HAL_ADC_ConfigChannel+0x1da>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b06      	cmp	r3, #6
 8000c26:	d81c      	bhi.n	8000c62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	3b05      	subs	r3, #5
 8000c3a:	221f      	movs	r2, #31
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4019      	ands	r1, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	3b05      	subs	r3, #5
 8000c54:	fa00 f203 	lsl.w	r2, r0, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c60:	e03c      	b.n	8000cdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	d81c      	bhi.n	8000ca4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b23      	subs	r3, #35	; 0x23
 8000c7c:	221f      	movs	r2, #31
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4019      	ands	r1, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	3b23      	subs	r3, #35	; 0x23
 8000c96:	fa00 f203 	lsl.w	r2, r0, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ca2:	e01b      	b.n	8000cdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3b41      	subs	r3, #65	; 0x41
 8000cb6:	221f      	movs	r2, #31
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	4019      	ands	r1, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	3b41      	subs	r3, #65	; 0x41
 8000cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d91c      	bls.n	8000d1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68d9      	ldr	r1, [r3, #12]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3b1e      	subs	r3, #30
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4019      	ands	r1, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6898      	ldr	r0, [r3, #8]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b1e      	subs	r3, #30
 8000d10:	fa00 f203 	lsl.w	r2, r0, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	e019      	b.n	8000d52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6919      	ldr	r1, [r3, #16]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2207      	movs	r2, #7
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4019      	ands	r1, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6898      	ldr	r0, [r3, #8]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	fa00 f203 	lsl.w	r2, r0, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	d003      	beq.n	8000d62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d5e:	2b11      	cmp	r3, #17
 8000d60:	d132      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_ADC_ConfigChannel+0x1e4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d125      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d126      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	d11a      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	0c9a      	lsrs	r2, r3, #18
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000da8:	e002      	b.n	8000db0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f9      	bne.n	8000daa <HAL_ADC_ConfigChannel+0x1b2>
 8000db6:	e007      	b.n	8000dc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f043 0220 	orr.w	r2, r3, #32
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40012400 	.word	0x40012400
 8000de0:	20000000 	.word	0x20000000
 8000de4:	431bde83 	.word	0x431bde83

08000de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d040      	beq.n	8000e88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f042 0201 	orr.w	r2, r2, #1
 8000e14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <ADC_Enable+0xac>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <ADC_Enable+0xb0>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e24:	e002      	b.n	8000e2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e32:	f7ff fce1 	bl	80007f8 <HAL_GetTick>
 8000e36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e38:	e01f      	b.n	8000e7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e3a:	f7ff fcdd 	bl	80007f8 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d918      	bls.n	8000e7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d011      	beq.n	8000e7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f043 0210 	orr.w	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e007      	b.n	8000e8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d1d8      	bne.n	8000e3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d12e      	bne.n	8000f14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0201 	bic.w	r2, r2, #1
 8000ec4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ec6:	f7ff fc97 	bl	80007f8 <HAL_GetTick>
 8000eca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ecc:	e01b      	b.n	8000f06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ece:	f7ff fc93 	bl	80007f8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d914      	bls.n	8000f06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d10d      	bne.n	8000f06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f043 0210 	orr.w	r2, r3, #16
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	f043 0201 	orr.w	r2, r3, #1
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e007      	b.n	8000f16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d0dc      	beq.n	8000ece <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d127      	bne.n	8000f88 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f52:	d115      	bne.n	8000f80 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d111      	bne.n	8000f80 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d105      	bne.n	8000f80 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff fe1d 	bl	8000bc0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f86:	e004      	b.n	8000f92 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff fe12 	bl	8000bd2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	f043 0204 	orr.w	r2, r3, #4
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff fe01 	bl	8000be4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_ADCEx_Calibration_Start+0x1e>
 8001006:	2302      	movs	r3, #2
 8001008:	e097      	b.n	800113a <HAL_ADCEx_Calibration_Start+0x14e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff42 	bl	8000e9c <ADC_ConversionStop_Disable>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fee3 	bl	8000de8 <ADC_Enable>
 8001022:	4603      	mov	r3, r0
 8001024:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 8081 	bne.w	8001130 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001036:	f023 0302 	bic.w	r3, r3, #2
 800103a:	f043 0202 	orr.w	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HAL_ADCEx_Calibration_Start+0x158>)
 8001044:	681c      	ldr	r4, [r3, #0]
 8001046:	2002      	movs	r0, #2
 8001048:	f001 f9c8 	bl	80023dc <HAL_RCCEx_GetPeriphCLKFreq>
 800104c:	4603      	mov	r3, r0
 800104e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001052:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001054:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001056:	e002      	b.n	800105e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3b01      	subs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f9      	bne.n	8001058 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0208 	orr.w	r2, r2, #8
 8001072:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001074:	f7ff fbc0 	bl	80007f8 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800107a:	e01b      	b.n	80010b4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800107c:	f7ff fbbc 	bl	80007f8 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d914      	bls.n	80010b4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00d      	beq.n	80010b4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f023 0312 	bic.w	r3, r3, #18
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e042      	b.n	800113a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1dc      	bne.n	800107c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010d2:	f7ff fb91 	bl	80007f8 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010d8:	e01b      	b.n	8001112 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010da:	f7ff fb8d 	bl	80007f8 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b0a      	cmp	r3, #10
 80010e6:	d914      	bls.n	8001112 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00d      	beq.n	8001112 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f023 0312 	bic.w	r3, r3, #18
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e013      	b.n	800113a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1dc      	bne.n	80010da <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	f023 0303 	bic.w	r3, r3, #3
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001138:	7dfb      	ldrb	r3, [r7, #23]
}
 800113a:	4618      	mov	r0, r3
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000

08001148 <__NVIC_SetPriorityGrouping>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff2d 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff42 	bl	8001190 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e043      	b.n	8001402 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_DMA_Init+0xa8>)
 8001382:	4413      	add	r3, r2
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <HAL_DMA_Init+0xac>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_DMA_Init+0xb0>)
 8001396:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	bffdfff8 	.word	0xbffdfff8
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Start_IT+0x20>
 8001434:	2302      	movs	r3, #2
 8001436:	e04b      	b.n	80014d0 <HAL_DMA_Start_IT+0xb8>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d13a      	bne.n	80014c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f937 	bl	80016e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 020e 	orr.w	r2, r2, #14
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e00f      	b.n	80014b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 020a 	orr.w	r2, r2, #10
 80014ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e005      	b.n	80014ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2204      	movs	r2, #4
 80014f6:	409a      	lsls	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d04f      	beq.n	80015a0 <HAL_DMA_IRQHandler+0xc8>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d04a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b00      	cmp	r3, #0
 8001516:	d107      	bne.n	8001528 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0204 	bic.w	r2, r2, #4
 8001526:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_DMA_IRQHandler+0x1f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d029      	beq.n	8001586 <HAL_DMA_IRQHandler+0xae>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a65      	ldr	r2, [pc, #404]	; (80016cc <HAL_DMA_IRQHandler+0x1f4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d022      	beq.n	8001582 <HAL_DMA_IRQHandler+0xaa>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_DMA_IRQHandler+0x1f8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01a      	beq.n	800157c <HAL_DMA_IRQHandler+0xa4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_DMA_IRQHandler+0x1fc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d012      	beq.n	8001576 <HAL_DMA_IRQHandler+0x9e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <HAL_DMA_IRQHandler+0x200>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00a      	beq.n	8001570 <HAL_DMA_IRQHandler+0x98>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_DMA_IRQHandler+0x204>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d102      	bne.n	800156a <HAL_DMA_IRQHandler+0x92>
 8001564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001568:	e00e      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 800156a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800156e:	e00b      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001570:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001574:	e008      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800157a:	e005      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 800157c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001580:	e002      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	e000      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001586:	2304      	movs	r3, #4
 8001588:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <HAL_DMA_IRQHandler+0x208>)
 800158a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8094 	beq.w	80016be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800159e:	e08e      	b.n	80016be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2202      	movs	r2, #2
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d056      	beq.n	800165e <HAL_DMA_IRQHandler+0x186>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d051      	beq.n	800165e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10b      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020a 	bic.w	r2, r2, #10
 80015d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a38      	ldr	r2, [pc, #224]	; (80016c8 <HAL_DMA_IRQHandler+0x1f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d029      	beq.n	800163e <HAL_DMA_IRQHandler+0x166>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a37      	ldr	r2, [pc, #220]	; (80016cc <HAL_DMA_IRQHandler+0x1f4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <HAL_DMA_IRQHandler+0x162>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a35      	ldr	r2, [pc, #212]	; (80016d0 <HAL_DMA_IRQHandler+0x1f8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_IRQHandler+0x15c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <HAL_DMA_IRQHandler+0x1fc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d012      	beq.n	800162e <HAL_DMA_IRQHandler+0x156>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <HAL_DMA_IRQHandler+0x200>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x150>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <HAL_DMA_IRQHandler+0x204>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_DMA_IRQHandler+0x14a>
 800161c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001620:	e00e      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 8001622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001626:	e00b      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 8001628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162c:	e008      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 800162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001632:	e005      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	e002      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 800163a:	2320      	movs	r3, #32
 800163c:	e000      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 800163e:	2302      	movs	r3, #2
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <HAL_DMA_IRQHandler+0x208>)
 8001642:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d034      	beq.n	80016be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800165c:	e02f      	b.n	80016be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2208      	movs	r2, #8
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d028      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1e8>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020e 	bic.w	r2, r2, #14
 8001686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    }
  }
  return;
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
}
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40020008 	.word	0x40020008
 80016cc:	4002001c 	.word	0x4002001c
 80016d0:	40020030 	.word	0x40020030
 80016d4:	40020044 	.word	0x40020044
 80016d8:	40020058 	.word	0x40020058
 80016dc:	4002006c 	.word	0x4002006c
 80016e0:	40020000 	.word	0x40020000

080016e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d108      	bne.n	8001724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001722:	e007      	b.n	8001734 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e169      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8158 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a9a      	ldr	r2, [pc, #616]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a98      	ldr	r2, [pc, #608]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a96      	ldr	r2, [pc, #600]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a96      	ldr	r2, [pc, #600]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a94      	ldr	r2, [pc, #592]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a94      	ldr	r2, [pc, #592]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a92      	ldr	r2, [pc, #584]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a90      	ldr	r2, [pc, #576]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a79      	ldr	r2, [pc, #484]	; (80019f4 <HAL_GPIO_Init+0x2b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80b1 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1ec>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e0>
 800191c:	2303      	movs	r3, #3
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001920:	2304      	movs	r3, #4
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 800192c:	2300      	movs	r3, #0
 800192e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800193e:	492f      	ldr	r1, [pc, #188]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	492c      	ldr	r1, [pc, #176]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4928      	ldr	r1, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	491e      	ldr	r1, [pc, #120]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4918      	ldr	r1, [pc, #96]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4914      	ldr	r1, [pc, #80]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x2e2>
 80019de:	bf00      	nop
 80019e0:	10320000 	.word	0x10320000
 80019e4:	10310000 	.word	0x10310000
 80019e8:	10220000 	.word	0x10220000
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10120000 	.word	0x10120000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae8e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	; 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a64:	e003      	b.n	8001a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	041a      	lsls	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e272      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00c      	beq.n	8001abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa4:	4b8f      	ldr	r3, [pc, #572]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d112      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d10b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d06c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d168      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e24c      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x76>
 8001ae0:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a7f      	ldr	r2, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b7b      	ldr	r3, [pc, #492]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7a      	ldr	r2, [pc, #488]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b78      	ldr	r3, [pc, #480]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a77      	ldr	r2, [pc, #476]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0xbc>
 8001b1a:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a71      	ldr	r2, [pc, #452]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b34:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a67      	ldr	r2, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7fe fe50 	bl	80007f8 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7fe fe4c 	bl	80007f8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e200      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe4>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fe3c 	bl	80007f8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7fe fe38 	bl	80007f8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1ec      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x10c>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1c0      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4939      	ldr	r1, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fdf1 	bl	80007f8 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7fe fded 	bl	80007f8 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1a1      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4927      	ldr	r1, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe fdd0 	bl	80007f8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7fe fdcc 	bl	80007f8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e180      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03a      	beq.n	8001cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d019      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7fe fdb0 	bl	80007f8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7fe fdac 	bl	80007f8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e160      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 faba 	bl	8002234 <RCC_Delay>
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fd96 	bl	80007f8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cce:	e00f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7fe fd92 	bl	80007f8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d908      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e146      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	42420000 	.word	0x42420000
 8001cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e9      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a6 	beq.w	8001e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a87      	ldr	r2, [pc, #540]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b82      	ldr	r3, [pc, #520]	; (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7e      	ldr	r2, [pc, #504]	; (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe fd53 	bl	80007f8 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe fd4f 	bl	80007f8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e103      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b75      	ldr	r3, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x312>
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a6e      	ldr	r2, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	e02d      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001d92:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a69      	ldr	r2, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a66      	ldr	r2, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	e01c      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x356>
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a60      	ldr	r2, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a5d      	ldr	r2, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a5a      	ldr	r2, [pc, #360]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a57      	ldr	r2, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d015      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe fd03 	bl	80007f8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7fe fcff 	bl	80007f8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0b1      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RCC_OscConfig+0x37e>
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7fe fced 	bl	80007f8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fce9 	bl	80007f8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e09b      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ee      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8087 	beq.w	8001f6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d061      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d146      	bne.n	8001f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fcbd 	bl	80007f8 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7fe fcb9 	bl	80007f8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e06d      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4921      	ldr	r1, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a19      	ldr	r1, [r3, #32]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCC_OscConfig+0x4cc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fc8d 	bl	80007f8 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe fc89 	bl	80007f8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e03d      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46a>
 8001f00:	e035      	b.n	8001f6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fc76 	bl	80007f8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe fc72 	bl	80007f8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e026      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x498>
 8001f2e:	e01e      	b.n	8001f6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e019      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_OscConfig+0x500>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0d0      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4965      	ldr	r1, [pc, #404]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b8      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	494d      	ldr	r1, [pc, #308]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d040      	beq.n	800209c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d115      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e07f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e073      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4936      	ldr	r1, [pc, #216]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206c:	f7fe fbc4 	bl	80007f8 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7fe fbc0 	bl	80007f8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e053      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d210      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4922      	ldr	r1, [pc, #136]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e032      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4916      	ldr	r1, [pc, #88]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210a:	f000 f821 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800210e:	4602      	mov	r2, r0
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	490a      	ldr	r1, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	5ccb      	ldrb	r3, [r1, r3]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1cc>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1d0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fb22 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	080033d8 	.word	0x080033d8
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x36>
 800217e:	e027      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	613b      	str	r3, [r7, #16]
      break;
 8002184:	e027      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	0c5b      	lsrs	r3, r3, #17
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b2:	fb03 f202 	mul.w	r2, r3, r2
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e004      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	613b      	str	r3, [r7, #16]
      break;
 80021ce:	e002      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	613b      	str	r3, [r7, #16]
      break;
 80021d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d6:	693b      	ldr	r3, [r7, #16]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	007a1200 	.word	0x007a1200
 80021ec:	080033f0 	.word	0x080033f0
 80021f0:	08003400 	.word	0x08003400
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_RCC_GetHCLKFreq+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000000 	.word	0x20000000

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff fff2 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	080033e8 	.word	0x080033e8

08002234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RCC_Delay+0x34>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <RCC_Delay+0x38>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0a5b      	lsrs	r3, r3, #9
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002250:	bf00      	nop
  }
  while (Delay --);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	60fa      	str	r2, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <RCC_Delay+0x1c>
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d07d      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002290:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	61d3      	str	r3, [r2, #28]
 80022a8:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d118      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c4:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a42      	ldr	r2, [pc, #264]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fa92 	bl	80007f8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	e008      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe fa8e 	bl	80007f8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e06d      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02e      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d027      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002314:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232a:	4a29      	ldr	r2, [pc, #164]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fa5d 	bl	80007f8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fa59 	bl	80007f8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e036      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4917      	ldr	r1, [pc, #92]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002372:	4313      	orrs	r3, r2
 8002374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	490b      	ldr	r1, [pc, #44]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4904      	ldr	r1, [pc, #16]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420440 	.word	0x42420440

080023dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b10      	cmp	r3, #16
 8002402:	f200 808a 	bhi.w	800251a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d045      	beq.n	8002498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d075      	beq.n	80024fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002412:	e082      	b.n	800251a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002414:	4b46      	ldr	r3, [pc, #280]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d07b      	beq.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a41      	ldr	r2, [pc, #260]	; (8002534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0c5b      	lsrs	r3, r3, #17
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	4a3b      	ldr	r2, [pc, #236]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002458:	4a38      	ldr	r2, [pc, #224]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	e004      	b.n	8002474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4a34      	ldr	r2, [pc, #208]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002480:	d102      	bne.n	8002488 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	61bb      	str	r3, [r7, #24]
      break;
 8002486:	e04a      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
      break;
 8002496:	e042      	b.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a8:	d108      	bne.n	80024bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	e01f      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c6:	d109      	bne.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e00f      	b.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e6:	d11c      	bne.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d016      	beq.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80024f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024f8:	61bb      	str	r3, [r7, #24]
      break;
 80024fa:	e012      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024fc:	e011      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024fe:	f7ff fe85 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	0b9b      	lsrs	r3, r3, #14
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	61bb      	str	r3, [r7, #24]
      break;
 8002518:	e004      	b.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002522:	bf00      	nop
    }
  }
  return (frequency);
 8002524:	69bb      	ldr	r3, [r7, #24]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	08003404 	.word	0x08003404
 8002538:	08003414 	.word	0x08003414
 800253c:	007a1200 	.word	0x007a1200
 8002540:	003d0900 	.word	0x003d0900
 8002544:	aaaaaaab 	.word	0xaaaaaaab

08002548 <std>:
 8002548:	2300      	movs	r3, #0
 800254a:	b510      	push	{r4, lr}
 800254c:	4604      	mov	r4, r0
 800254e:	e9c0 3300 	strd	r3, r3, [r0]
 8002552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002556:	6083      	str	r3, [r0, #8]
 8002558:	8181      	strh	r1, [r0, #12]
 800255a:	6643      	str	r3, [r0, #100]	; 0x64
 800255c:	81c2      	strh	r2, [r0, #14]
 800255e:	6183      	str	r3, [r0, #24]
 8002560:	4619      	mov	r1, r3
 8002562:	2208      	movs	r2, #8
 8002564:	305c      	adds	r0, #92	; 0x5c
 8002566:	f000 f8f4 	bl	8002752 <memset>
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <std+0x38>)
 800256c:	6224      	str	r4, [r4, #32]
 800256e:	6263      	str	r3, [r4, #36]	; 0x24
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <std+0x3c>)
 8002572:	62a3      	str	r3, [r4, #40]	; 0x28
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <std+0x40>)
 8002576:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <std+0x44>)
 800257a:	6323      	str	r3, [r4, #48]	; 0x30
 800257c:	bd10      	pop	{r4, pc}
 800257e:	bf00      	nop
 8002580:	080026cd 	.word	0x080026cd
 8002584:	080026ef 	.word	0x080026ef
 8002588:	08002727 	.word	0x08002727
 800258c:	0800274b 	.word	0x0800274b

08002590 <stdio_exit_handler>:
 8002590:	4a02      	ldr	r2, [pc, #8]	; (800259c <stdio_exit_handler+0xc>)
 8002592:	4903      	ldr	r1, [pc, #12]	; (80025a0 <stdio_exit_handler+0x10>)
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <stdio_exit_handler+0x14>)
 8002596:	f000 b869 	b.w	800266c <_fwalk_sglue>
 800259a:	bf00      	nop
 800259c:	2000000c 	.word	0x2000000c
 80025a0:	080030e1 	.word	0x080030e1
 80025a4:	20000018 	.word	0x20000018

080025a8 <cleanup_stdio>:
 80025a8:	6841      	ldr	r1, [r0, #4]
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <cleanup_stdio+0x34>)
 80025ac:	b510      	push	{r4, lr}
 80025ae:	4299      	cmp	r1, r3
 80025b0:	4604      	mov	r4, r0
 80025b2:	d001      	beq.n	80025b8 <cleanup_stdio+0x10>
 80025b4:	f000 fd94 	bl	80030e0 <_fflush_r>
 80025b8:	68a1      	ldr	r1, [r4, #8]
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <cleanup_stdio+0x38>)
 80025bc:	4299      	cmp	r1, r3
 80025be:	d002      	beq.n	80025c6 <cleanup_stdio+0x1e>
 80025c0:	4620      	mov	r0, r4
 80025c2:	f000 fd8d 	bl	80030e0 <_fflush_r>
 80025c6:	68e1      	ldr	r1, [r4, #12]
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <cleanup_stdio+0x3c>)
 80025ca:	4299      	cmp	r1, r3
 80025cc:	d004      	beq.n	80025d8 <cleanup_stdio+0x30>
 80025ce:	4620      	mov	r0, r4
 80025d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025d4:	f000 bd84 	b.w	80030e0 <_fflush_r>
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	bf00      	nop
 80025dc:	20000104 	.word	0x20000104
 80025e0:	2000016c 	.word	0x2000016c
 80025e4:	200001d4 	.word	0x200001d4

080025e8 <global_stdio_init.part.0>:
 80025e8:	b510      	push	{r4, lr}
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <global_stdio_init.part.0+0x30>)
 80025ec:	4c0b      	ldr	r4, [pc, #44]	; (800261c <global_stdio_init.part.0+0x34>)
 80025ee:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <global_stdio_init.part.0+0x38>)
 80025f0:	4620      	mov	r0, r4
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	2104      	movs	r1, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	f7ff ffa6 	bl	8002548 <std>
 80025fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002600:	2201      	movs	r2, #1
 8002602:	2109      	movs	r1, #9
 8002604:	f7ff ffa0 	bl	8002548 <std>
 8002608:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800260c:	2202      	movs	r2, #2
 800260e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002612:	2112      	movs	r1, #18
 8002614:	f7ff bf98 	b.w	8002548 <std>
 8002618:	2000023c 	.word	0x2000023c
 800261c:	20000104 	.word	0x20000104
 8002620:	08002591 	.word	0x08002591

08002624 <__sfp_lock_acquire>:
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <__sfp_lock_acquire+0x8>)
 8002626:	f000 b90d 	b.w	8002844 <__retarget_lock_acquire_recursive>
 800262a:	bf00      	nop
 800262c:	20000245 	.word	0x20000245

08002630 <__sfp_lock_release>:
 8002630:	4801      	ldr	r0, [pc, #4]	; (8002638 <__sfp_lock_release+0x8>)
 8002632:	f000 b908 	b.w	8002846 <__retarget_lock_release_recursive>
 8002636:	bf00      	nop
 8002638:	20000245 	.word	0x20000245

0800263c <__sinit>:
 800263c:	b510      	push	{r4, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	f7ff fff0 	bl	8002624 <__sfp_lock_acquire>
 8002644:	6a23      	ldr	r3, [r4, #32]
 8002646:	b11b      	cbz	r3, 8002650 <__sinit+0x14>
 8002648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800264c:	f7ff bff0 	b.w	8002630 <__sfp_lock_release>
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <__sinit+0x28>)
 8002652:	6223      	str	r3, [r4, #32]
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__sinit+0x2c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f5      	bne.n	8002648 <__sinit+0xc>
 800265c:	f7ff ffc4 	bl	80025e8 <global_stdio_init.part.0>
 8002660:	e7f2      	b.n	8002648 <__sinit+0xc>
 8002662:	bf00      	nop
 8002664:	080025a9 	.word	0x080025a9
 8002668:	2000023c 	.word	0x2000023c

0800266c <_fwalk_sglue>:
 800266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002670:	4607      	mov	r7, r0
 8002672:	4688      	mov	r8, r1
 8002674:	4614      	mov	r4, r2
 8002676:	2600      	movs	r6, #0
 8002678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800267c:	f1b9 0901 	subs.w	r9, r9, #1
 8002680:	d505      	bpl.n	800268e <_fwalk_sglue+0x22>
 8002682:	6824      	ldr	r4, [r4, #0]
 8002684:	2c00      	cmp	r4, #0
 8002686:	d1f7      	bne.n	8002678 <_fwalk_sglue+0xc>
 8002688:	4630      	mov	r0, r6
 800268a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800268e:	89ab      	ldrh	r3, [r5, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d907      	bls.n	80026a4 <_fwalk_sglue+0x38>
 8002694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002698:	3301      	adds	r3, #1
 800269a:	d003      	beq.n	80026a4 <_fwalk_sglue+0x38>
 800269c:	4629      	mov	r1, r5
 800269e:	4638      	mov	r0, r7
 80026a0:	47c0      	blx	r8
 80026a2:	4306      	orrs	r6, r0
 80026a4:	3568      	adds	r5, #104	; 0x68
 80026a6:	e7e9      	b.n	800267c <_fwalk_sglue+0x10>

080026a8 <iprintf>:
 80026a8:	b40f      	push	{r0, r1, r2, r3}
 80026aa:	b507      	push	{r0, r1, r2, lr}
 80026ac:	4906      	ldr	r1, [pc, #24]	; (80026c8 <iprintf+0x20>)
 80026ae:	ab04      	add	r3, sp, #16
 80026b0:	6808      	ldr	r0, [r1, #0]
 80026b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b6:	6881      	ldr	r1, [r0, #8]
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	f000 f9e1 	bl	8002a80 <_vfiprintf_r>
 80026be:	b003      	add	sp, #12
 80026c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80026c4:	b004      	add	sp, #16
 80026c6:	4770      	bx	lr
 80026c8:	20000064 	.word	0x20000064

080026cc <__sread>:
 80026cc:	b510      	push	{r4, lr}
 80026ce:	460c      	mov	r4, r1
 80026d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d4:	f000 f868 	bl	80027a8 <_read_r>
 80026d8:	2800      	cmp	r0, #0
 80026da:	bfab      	itete	ge
 80026dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026de:	89a3      	ldrhlt	r3, [r4, #12]
 80026e0:	181b      	addge	r3, r3, r0
 80026e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026e6:	bfac      	ite	ge
 80026e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80026ea:	81a3      	strhlt	r3, [r4, #12]
 80026ec:	bd10      	pop	{r4, pc}

080026ee <__swrite>:
 80026ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f2:	461f      	mov	r7, r3
 80026f4:	898b      	ldrh	r3, [r1, #12]
 80026f6:	4605      	mov	r5, r0
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	460c      	mov	r4, r1
 80026fc:	4616      	mov	r6, r2
 80026fe:	d505      	bpl.n	800270c <__swrite+0x1e>
 8002700:	2302      	movs	r3, #2
 8002702:	2200      	movs	r2, #0
 8002704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002708:	f000 f83c 	bl	8002784 <_lseek_r>
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	4632      	mov	r2, r6
 8002710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002714:	81a3      	strh	r3, [r4, #12]
 8002716:	4628      	mov	r0, r5
 8002718:	463b      	mov	r3, r7
 800271a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800271e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002722:	f000 b853 	b.w	80027cc <_write_r>

08002726 <__sseek>:
 8002726:	b510      	push	{r4, lr}
 8002728:	460c      	mov	r4, r1
 800272a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272e:	f000 f829 	bl	8002784 <_lseek_r>
 8002732:	1c43      	adds	r3, r0, #1
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	bf15      	itete	ne
 8002738:	6560      	strne	r0, [r4, #84]	; 0x54
 800273a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800273e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002742:	81a3      	strheq	r3, [r4, #12]
 8002744:	bf18      	it	ne
 8002746:	81a3      	strhne	r3, [r4, #12]
 8002748:	bd10      	pop	{r4, pc}

0800274a <__sclose>:
 800274a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274e:	f000 b809 	b.w	8002764 <_close_r>

08002752 <memset>:
 8002752:	4603      	mov	r3, r0
 8002754:	4402      	add	r2, r0
 8002756:	4293      	cmp	r3, r2
 8002758:	d100      	bne.n	800275c <memset+0xa>
 800275a:	4770      	bx	lr
 800275c:	f803 1b01 	strb.w	r1, [r3], #1
 8002760:	e7f9      	b.n	8002756 <memset+0x4>
	...

08002764 <_close_r>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	2300      	movs	r3, #0
 8002768:	4d05      	ldr	r5, [pc, #20]	; (8002780 <_close_r+0x1c>)
 800276a:	4604      	mov	r4, r0
 800276c:	4608      	mov	r0, r1
 800276e:	602b      	str	r3, [r5, #0]
 8002770:	f7fd ff57 	bl	8000622 <_close>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_close_r+0x1a>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_close_r+0x1a>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	20000240 	.word	0x20000240

08002784 <_lseek_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	2200      	movs	r2, #0
 800278e:	4d05      	ldr	r5, [pc, #20]	; (80027a4 <_lseek_r+0x20>)
 8002790:	602a      	str	r2, [r5, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f7fd ff69 	bl	800066a <_lseek>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	d102      	bne.n	80027a2 <_lseek_r+0x1e>
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	b103      	cbz	r3, 80027a2 <_lseek_r+0x1e>
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	bd38      	pop	{r3, r4, r5, pc}
 80027a4:	20000240 	.word	0x20000240

080027a8 <_read_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4604      	mov	r4, r0
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	2200      	movs	r2, #0
 80027b2:	4d05      	ldr	r5, [pc, #20]	; (80027c8 <_read_r+0x20>)
 80027b4:	602a      	str	r2, [r5, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7fd ff16 	bl	80005e8 <_read>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	d102      	bne.n	80027c6 <_read_r+0x1e>
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	b103      	cbz	r3, 80027c6 <_read_r+0x1e>
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	20000240 	.word	0x20000240

080027cc <_write_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	4604      	mov	r4, r0
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	4d05      	ldr	r5, [pc, #20]	; (80027ec <_write_r+0x20>)
 80027d8:	602a      	str	r2, [r5, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f7fd fcdc 	bl	8000198 <_write>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d102      	bne.n	80027ea <_write_r+0x1e>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	b103      	cbz	r3, 80027ea <_write_r+0x1e>
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	20000240 	.word	0x20000240

080027f0 <__errno>:
 80027f0:	4b01      	ldr	r3, [pc, #4]	; (80027f8 <__errno+0x8>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000064 	.word	0x20000064

080027fc <__libc_init_array>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	2600      	movs	r6, #0
 8002800:	4d0c      	ldr	r5, [pc, #48]	; (8002834 <__libc_init_array+0x38>)
 8002802:	4c0d      	ldr	r4, [pc, #52]	; (8002838 <__libc_init_array+0x3c>)
 8002804:	1b64      	subs	r4, r4, r5
 8002806:	10a4      	asrs	r4, r4, #2
 8002808:	42a6      	cmp	r6, r4
 800280a:	d109      	bne.n	8002820 <__libc_init_array+0x24>
 800280c:	f000 fdc8 	bl	80033a0 <_init>
 8002810:	2600      	movs	r6, #0
 8002812:	4d0a      	ldr	r5, [pc, #40]	; (800283c <__libc_init_array+0x40>)
 8002814:	4c0a      	ldr	r4, [pc, #40]	; (8002840 <__libc_init_array+0x44>)
 8002816:	1b64      	subs	r4, r4, r5
 8002818:	10a4      	asrs	r4, r4, #2
 800281a:	42a6      	cmp	r6, r4
 800281c:	d105      	bne.n	800282a <__libc_init_array+0x2e>
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	f855 3b04 	ldr.w	r3, [r5], #4
 8002824:	4798      	blx	r3
 8002826:	3601      	adds	r6, #1
 8002828:	e7ee      	b.n	8002808 <__libc_init_array+0xc>
 800282a:	f855 3b04 	ldr.w	r3, [r5], #4
 800282e:	4798      	blx	r3
 8002830:	3601      	adds	r6, #1
 8002832:	e7f2      	b.n	800281a <__libc_init_array+0x1e>
 8002834:	0800344c 	.word	0x0800344c
 8002838:	0800344c 	.word	0x0800344c
 800283c:	0800344c 	.word	0x0800344c
 8002840:	08003450 	.word	0x08003450

08002844 <__retarget_lock_acquire_recursive>:
 8002844:	4770      	bx	lr

08002846 <__retarget_lock_release_recursive>:
 8002846:	4770      	bx	lr

08002848 <_free_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4605      	mov	r5, r0
 800284c:	2900      	cmp	r1, #0
 800284e:	d040      	beq.n	80028d2 <_free_r+0x8a>
 8002850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002854:	1f0c      	subs	r4, r1, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	bfb8      	it	lt
 800285a:	18e4      	addlt	r4, r4, r3
 800285c:	f000 f8dc 	bl	8002a18 <__malloc_lock>
 8002860:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <_free_r+0x8c>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	b933      	cbnz	r3, 8002874 <_free_r+0x2c>
 8002866:	6063      	str	r3, [r4, #4]
 8002868:	6014      	str	r4, [r2, #0]
 800286a:	4628      	mov	r0, r5
 800286c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002870:	f000 b8d8 	b.w	8002a24 <__malloc_unlock>
 8002874:	42a3      	cmp	r3, r4
 8002876:	d908      	bls.n	800288a <_free_r+0x42>
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	1821      	adds	r1, r4, r0
 800287c:	428b      	cmp	r3, r1
 800287e:	bf01      	itttt	eq
 8002880:	6819      	ldreq	r1, [r3, #0]
 8002882:	685b      	ldreq	r3, [r3, #4]
 8002884:	1809      	addeq	r1, r1, r0
 8002886:	6021      	streq	r1, [r4, #0]
 8002888:	e7ed      	b.n	8002866 <_free_r+0x1e>
 800288a:	461a      	mov	r2, r3
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	b10b      	cbz	r3, 8002894 <_free_r+0x4c>
 8002890:	42a3      	cmp	r3, r4
 8002892:	d9fa      	bls.n	800288a <_free_r+0x42>
 8002894:	6811      	ldr	r1, [r2, #0]
 8002896:	1850      	adds	r0, r2, r1
 8002898:	42a0      	cmp	r0, r4
 800289a:	d10b      	bne.n	80028b4 <_free_r+0x6c>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	4401      	add	r1, r0
 80028a0:	1850      	adds	r0, r2, r1
 80028a2:	4283      	cmp	r3, r0
 80028a4:	6011      	str	r1, [r2, #0]
 80028a6:	d1e0      	bne.n	800286a <_free_r+0x22>
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4408      	add	r0, r1
 80028ae:	6010      	str	r0, [r2, #0]
 80028b0:	6053      	str	r3, [r2, #4]
 80028b2:	e7da      	b.n	800286a <_free_r+0x22>
 80028b4:	d902      	bls.n	80028bc <_free_r+0x74>
 80028b6:	230c      	movs	r3, #12
 80028b8:	602b      	str	r3, [r5, #0]
 80028ba:	e7d6      	b.n	800286a <_free_r+0x22>
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	1821      	adds	r1, r4, r0
 80028c0:	428b      	cmp	r3, r1
 80028c2:	bf01      	itttt	eq
 80028c4:	6819      	ldreq	r1, [r3, #0]
 80028c6:	685b      	ldreq	r3, [r3, #4]
 80028c8:	1809      	addeq	r1, r1, r0
 80028ca:	6021      	streq	r1, [r4, #0]
 80028cc:	6063      	str	r3, [r4, #4]
 80028ce:	6054      	str	r4, [r2, #4]
 80028d0:	e7cb      	b.n	800286a <_free_r+0x22>
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	20000248 	.word	0x20000248

080028d8 <sbrk_aligned>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	4e0e      	ldr	r6, [pc, #56]	; (8002914 <sbrk_aligned+0x3c>)
 80028dc:	460c      	mov	r4, r1
 80028de:	6831      	ldr	r1, [r6, #0]
 80028e0:	4605      	mov	r5, r0
 80028e2:	b911      	cbnz	r1, 80028ea <sbrk_aligned+0x12>
 80028e4:	f000 fcba 	bl	800325c <_sbrk_r>
 80028e8:	6030      	str	r0, [r6, #0]
 80028ea:	4621      	mov	r1, r4
 80028ec:	4628      	mov	r0, r5
 80028ee:	f000 fcb5 	bl	800325c <_sbrk_r>
 80028f2:	1c43      	adds	r3, r0, #1
 80028f4:	d00a      	beq.n	800290c <sbrk_aligned+0x34>
 80028f6:	1cc4      	adds	r4, r0, #3
 80028f8:	f024 0403 	bic.w	r4, r4, #3
 80028fc:	42a0      	cmp	r0, r4
 80028fe:	d007      	beq.n	8002910 <sbrk_aligned+0x38>
 8002900:	1a21      	subs	r1, r4, r0
 8002902:	4628      	mov	r0, r5
 8002904:	f000 fcaa 	bl	800325c <_sbrk_r>
 8002908:	3001      	adds	r0, #1
 800290a:	d101      	bne.n	8002910 <sbrk_aligned+0x38>
 800290c:	f04f 34ff 	mov.w	r4, #4294967295
 8002910:	4620      	mov	r0, r4
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	2000024c 	.word	0x2000024c

08002918 <_malloc_r>:
 8002918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800291c:	1ccd      	adds	r5, r1, #3
 800291e:	f025 0503 	bic.w	r5, r5, #3
 8002922:	3508      	adds	r5, #8
 8002924:	2d0c      	cmp	r5, #12
 8002926:	bf38      	it	cc
 8002928:	250c      	movcc	r5, #12
 800292a:	2d00      	cmp	r5, #0
 800292c:	4607      	mov	r7, r0
 800292e:	db01      	blt.n	8002934 <_malloc_r+0x1c>
 8002930:	42a9      	cmp	r1, r5
 8002932:	d905      	bls.n	8002940 <_malloc_r+0x28>
 8002934:	230c      	movs	r3, #12
 8002936:	2600      	movs	r6, #0
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4630      	mov	r0, r6
 800293c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002940:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a14 <_malloc_r+0xfc>
 8002944:	f000 f868 	bl	8002a18 <__malloc_lock>
 8002948:	f8d8 3000 	ldr.w	r3, [r8]
 800294c:	461c      	mov	r4, r3
 800294e:	bb5c      	cbnz	r4, 80029a8 <_malloc_r+0x90>
 8002950:	4629      	mov	r1, r5
 8002952:	4638      	mov	r0, r7
 8002954:	f7ff ffc0 	bl	80028d8 <sbrk_aligned>
 8002958:	1c43      	adds	r3, r0, #1
 800295a:	4604      	mov	r4, r0
 800295c:	d155      	bne.n	8002a0a <_malloc_r+0xf2>
 800295e:	f8d8 4000 	ldr.w	r4, [r8]
 8002962:	4626      	mov	r6, r4
 8002964:	2e00      	cmp	r6, #0
 8002966:	d145      	bne.n	80029f4 <_malloc_r+0xdc>
 8002968:	2c00      	cmp	r4, #0
 800296a:	d048      	beq.n	80029fe <_malloc_r+0xe6>
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	4631      	mov	r1, r6
 8002970:	4638      	mov	r0, r7
 8002972:	eb04 0903 	add.w	r9, r4, r3
 8002976:	f000 fc71 	bl	800325c <_sbrk_r>
 800297a:	4581      	cmp	r9, r0
 800297c:	d13f      	bne.n	80029fe <_malloc_r+0xe6>
 800297e:	6821      	ldr	r1, [r4, #0]
 8002980:	4638      	mov	r0, r7
 8002982:	1a6d      	subs	r5, r5, r1
 8002984:	4629      	mov	r1, r5
 8002986:	f7ff ffa7 	bl	80028d8 <sbrk_aligned>
 800298a:	3001      	adds	r0, #1
 800298c:	d037      	beq.n	80029fe <_malloc_r+0xe6>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	442b      	add	r3, r5
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	f8d8 3000 	ldr.w	r3, [r8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d038      	beq.n	8002a0e <_malloc_r+0xf6>
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	42a2      	cmp	r2, r4
 80029a0:	d12b      	bne.n	80029fa <_malloc_r+0xe2>
 80029a2:	2200      	movs	r2, #0
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	e00f      	b.n	80029c8 <_malloc_r+0xb0>
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	1b52      	subs	r2, r2, r5
 80029ac:	d41f      	bmi.n	80029ee <_malloc_r+0xd6>
 80029ae:	2a0b      	cmp	r2, #11
 80029b0:	d917      	bls.n	80029e2 <_malloc_r+0xca>
 80029b2:	1961      	adds	r1, r4, r5
 80029b4:	42a3      	cmp	r3, r4
 80029b6:	6025      	str	r5, [r4, #0]
 80029b8:	bf18      	it	ne
 80029ba:	6059      	strne	r1, [r3, #4]
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	bf08      	it	eq
 80029c0:	f8c8 1000 	streq.w	r1, [r8]
 80029c4:	5162      	str	r2, [r4, r5]
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	4638      	mov	r0, r7
 80029ca:	f104 060b 	add.w	r6, r4, #11
 80029ce:	f000 f829 	bl	8002a24 <__malloc_unlock>
 80029d2:	f026 0607 	bic.w	r6, r6, #7
 80029d6:	1d23      	adds	r3, r4, #4
 80029d8:	1af2      	subs	r2, r6, r3
 80029da:	d0ae      	beq.n	800293a <_malloc_r+0x22>
 80029dc:	1b9b      	subs	r3, r3, r6
 80029de:	50a3      	str	r3, [r4, r2]
 80029e0:	e7ab      	b.n	800293a <_malloc_r+0x22>
 80029e2:	42a3      	cmp	r3, r4
 80029e4:	6862      	ldr	r2, [r4, #4]
 80029e6:	d1dd      	bne.n	80029a4 <_malloc_r+0x8c>
 80029e8:	f8c8 2000 	str.w	r2, [r8]
 80029ec:	e7ec      	b.n	80029c8 <_malloc_r+0xb0>
 80029ee:	4623      	mov	r3, r4
 80029f0:	6864      	ldr	r4, [r4, #4]
 80029f2:	e7ac      	b.n	800294e <_malloc_r+0x36>
 80029f4:	4634      	mov	r4, r6
 80029f6:	6876      	ldr	r6, [r6, #4]
 80029f8:	e7b4      	b.n	8002964 <_malloc_r+0x4c>
 80029fa:	4613      	mov	r3, r2
 80029fc:	e7cc      	b.n	8002998 <_malloc_r+0x80>
 80029fe:	230c      	movs	r3, #12
 8002a00:	4638      	mov	r0, r7
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	f000 f80e 	bl	8002a24 <__malloc_unlock>
 8002a08:	e797      	b.n	800293a <_malloc_r+0x22>
 8002a0a:	6025      	str	r5, [r4, #0]
 8002a0c:	e7dc      	b.n	80029c8 <_malloc_r+0xb0>
 8002a0e:	605b      	str	r3, [r3, #4]
 8002a10:	deff      	udf	#255	; 0xff
 8002a12:	bf00      	nop
 8002a14:	20000248 	.word	0x20000248

08002a18 <__malloc_lock>:
 8002a18:	4801      	ldr	r0, [pc, #4]	; (8002a20 <__malloc_lock+0x8>)
 8002a1a:	f7ff bf13 	b.w	8002844 <__retarget_lock_acquire_recursive>
 8002a1e:	bf00      	nop
 8002a20:	20000244 	.word	0x20000244

08002a24 <__malloc_unlock>:
 8002a24:	4801      	ldr	r0, [pc, #4]	; (8002a2c <__malloc_unlock+0x8>)
 8002a26:	f7ff bf0e 	b.w	8002846 <__retarget_lock_release_recursive>
 8002a2a:	bf00      	nop
 8002a2c:	20000244 	.word	0x20000244

08002a30 <__sfputc_r>:
 8002a30:	6893      	ldr	r3, [r2, #8]
 8002a32:	b410      	push	{r4}
 8002a34:	3b01      	subs	r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	6093      	str	r3, [r2, #8]
 8002a3a:	da07      	bge.n	8002a4c <__sfputc_r+0x1c>
 8002a3c:	6994      	ldr	r4, [r2, #24]
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	db01      	blt.n	8002a46 <__sfputc_r+0x16>
 8002a42:	290a      	cmp	r1, #10
 8002a44:	d102      	bne.n	8002a4c <__sfputc_r+0x1c>
 8002a46:	bc10      	pop	{r4}
 8002a48:	f000 bb72 	b.w	8003130 <__swbuf_r>
 8002a4c:	6813      	ldr	r3, [r2, #0]
 8002a4e:	1c58      	adds	r0, r3, #1
 8002a50:	6010      	str	r0, [r2, #0]
 8002a52:	7019      	strb	r1, [r3, #0]
 8002a54:	4608      	mov	r0, r1
 8002a56:	bc10      	pop	{r4}
 8002a58:	4770      	bx	lr

08002a5a <__sfputs_r>:
 8002a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	460f      	mov	r7, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	18d5      	adds	r5, r2, r3
 8002a64:	42ac      	cmp	r4, r5
 8002a66:	d101      	bne.n	8002a6c <__sfputs_r+0x12>
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e007      	b.n	8002a7c <__sfputs_r+0x22>
 8002a6c:	463a      	mov	r2, r7
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a74:	f7ff ffdc 	bl	8002a30 <__sfputc_r>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d1f3      	bne.n	8002a64 <__sfputs_r+0xa>
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a80 <_vfiprintf_r>:
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	460d      	mov	r5, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	4698      	mov	r8, r3
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	b09d      	sub	sp, #116	; 0x74
 8002a8e:	b118      	cbz	r0, 8002a98 <_vfiprintf_r+0x18>
 8002a90:	6a03      	ldr	r3, [r0, #32]
 8002a92:	b90b      	cbnz	r3, 8002a98 <_vfiprintf_r+0x18>
 8002a94:	f7ff fdd2 	bl	800263c <__sinit>
 8002a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a9a:	07d9      	lsls	r1, r3, #31
 8002a9c:	d405      	bmi.n	8002aaa <_vfiprintf_r+0x2a>
 8002a9e:	89ab      	ldrh	r3, [r5, #12]
 8002aa0:	059a      	lsls	r2, r3, #22
 8002aa2:	d402      	bmi.n	8002aaa <_vfiprintf_r+0x2a>
 8002aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aa6:	f7ff fecd 	bl	8002844 <__retarget_lock_acquire_recursive>
 8002aaa:	89ab      	ldrh	r3, [r5, #12]
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	d501      	bpl.n	8002ab4 <_vfiprintf_r+0x34>
 8002ab0:	692b      	ldr	r3, [r5, #16]
 8002ab2:	b99b      	cbnz	r3, 8002adc <_vfiprintf_r+0x5c>
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	f000 fb78 	bl	80031ac <__swsetup_r>
 8002abc:	b170      	cbz	r0, 8002adc <_vfiprintf_r+0x5c>
 8002abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ac0:	07dc      	lsls	r4, r3, #31
 8002ac2:	d504      	bpl.n	8002ace <_vfiprintf_r+0x4e>
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	b01d      	add	sp, #116	; 0x74
 8002aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ace:	89ab      	ldrh	r3, [r5, #12]
 8002ad0:	0598      	lsls	r0, r3, #22
 8002ad2:	d4f7      	bmi.n	8002ac4 <_vfiprintf_r+0x44>
 8002ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ad6:	f7ff feb6 	bl	8002846 <__retarget_lock_release_recursive>
 8002ada:	e7f3      	b.n	8002ac4 <_vfiprintf_r+0x44>
 8002adc:	2300      	movs	r3, #0
 8002ade:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ae6:	2330      	movs	r3, #48	; 0x30
 8002ae8:	f04f 0901 	mov.w	r9, #1
 8002aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8002af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002ca0 <_vfiprintf_r+0x220>
 8002af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002af8:	4623      	mov	r3, r4
 8002afa:	469a      	mov	sl, r3
 8002afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b00:	b10a      	cbz	r2, 8002b06 <_vfiprintf_r+0x86>
 8002b02:	2a25      	cmp	r2, #37	; 0x25
 8002b04:	d1f9      	bne.n	8002afa <_vfiprintf_r+0x7a>
 8002b06:	ebba 0b04 	subs.w	fp, sl, r4
 8002b0a:	d00b      	beq.n	8002b24 <_vfiprintf_r+0xa4>
 8002b0c:	465b      	mov	r3, fp
 8002b0e:	4622      	mov	r2, r4
 8002b10:	4629      	mov	r1, r5
 8002b12:	4630      	mov	r0, r6
 8002b14:	f7ff ffa1 	bl	8002a5a <__sfputs_r>
 8002b18:	3001      	adds	r0, #1
 8002b1a:	f000 80a9 	beq.w	8002c70 <_vfiprintf_r+0x1f0>
 8002b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b20:	445a      	add	r2, fp
 8002b22:	9209      	str	r2, [sp, #36]	; 0x24
 8002b24:	f89a 3000 	ldrb.w	r3, [sl]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a1 	beq.w	8002c70 <_vfiprintf_r+0x1f0>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b38:	f10a 0a01 	add.w	sl, sl, #1
 8002b3c:	9304      	str	r3, [sp, #16]
 8002b3e:	9307      	str	r3, [sp, #28]
 8002b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b44:	931a      	str	r3, [sp, #104]	; 0x68
 8002b46:	4654      	mov	r4, sl
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b4e:	4854      	ldr	r0, [pc, #336]	; (8002ca0 <_vfiprintf_r+0x220>)
 8002b50:	f000 fb94 	bl	800327c <memchr>
 8002b54:	9a04      	ldr	r2, [sp, #16]
 8002b56:	b9d8      	cbnz	r0, 8002b90 <_vfiprintf_r+0x110>
 8002b58:	06d1      	lsls	r1, r2, #27
 8002b5a:	bf44      	itt	mi
 8002b5c:	2320      	movmi	r3, #32
 8002b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b62:	0713      	lsls	r3, r2, #28
 8002b64:	bf44      	itt	mi
 8002b66:	232b      	movmi	r3, #43	; 0x2b
 8002b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b70:	2b2a      	cmp	r3, #42	; 0x2a
 8002b72:	d015      	beq.n	8002ba0 <_vfiprintf_r+0x120>
 8002b74:	4654      	mov	r4, sl
 8002b76:	2000      	movs	r0, #0
 8002b78:	f04f 0c0a 	mov.w	ip, #10
 8002b7c:	9a07      	ldr	r2, [sp, #28]
 8002b7e:	4621      	mov	r1, r4
 8002b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b84:	3b30      	subs	r3, #48	; 0x30
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	d94d      	bls.n	8002c26 <_vfiprintf_r+0x1a6>
 8002b8a:	b1b0      	cbz	r0, 8002bba <_vfiprintf_r+0x13a>
 8002b8c:	9207      	str	r2, [sp, #28]
 8002b8e:	e014      	b.n	8002bba <_vfiprintf_r+0x13a>
 8002b90:	eba0 0308 	sub.w	r3, r0, r8
 8002b94:	fa09 f303 	lsl.w	r3, r9, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	9304      	str	r3, [sp, #16]
 8002b9e:	e7d2      	b.n	8002b46 <_vfiprintf_r+0xc6>
 8002ba0:	9b03      	ldr	r3, [sp, #12]
 8002ba2:	1d19      	adds	r1, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	9103      	str	r1, [sp, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bfbb      	ittet	lt
 8002bac:	425b      	neglt	r3, r3
 8002bae:	f042 0202 	orrlt.w	r2, r2, #2
 8002bb2:	9307      	strge	r3, [sp, #28]
 8002bb4:	9307      	strlt	r3, [sp, #28]
 8002bb6:	bfb8      	it	lt
 8002bb8:	9204      	strlt	r2, [sp, #16]
 8002bba:	7823      	ldrb	r3, [r4, #0]
 8002bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8002bbe:	d10c      	bne.n	8002bda <_vfiprintf_r+0x15a>
 8002bc0:	7863      	ldrb	r3, [r4, #1]
 8002bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc4:	d134      	bne.n	8002c30 <_vfiprintf_r+0x1b0>
 8002bc6:	9b03      	ldr	r3, [sp, #12]
 8002bc8:	3402      	adds	r4, #2
 8002bca:	1d1a      	adds	r2, r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	9203      	str	r2, [sp, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bfb8      	it	lt
 8002bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bd8:	9305      	str	r3, [sp, #20]
 8002bda:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ca4 <_vfiprintf_r+0x224>
 8002bde:	2203      	movs	r2, #3
 8002be0:	4650      	mov	r0, sl
 8002be2:	7821      	ldrb	r1, [r4, #0]
 8002be4:	f000 fb4a 	bl	800327c <memchr>
 8002be8:	b138      	cbz	r0, 8002bfa <_vfiprintf_r+0x17a>
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	9b04      	ldr	r3, [sp, #16]
 8002bee:	eba0 000a 	sub.w	r0, r0, sl
 8002bf2:	4082      	lsls	r2, r0
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	3401      	adds	r4, #1
 8002bf8:	9304      	str	r3, [sp, #16]
 8002bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bfe:	2206      	movs	r2, #6
 8002c00:	4829      	ldr	r0, [pc, #164]	; (8002ca8 <_vfiprintf_r+0x228>)
 8002c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c06:	f000 fb39 	bl	800327c <memchr>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d03f      	beq.n	8002c8e <_vfiprintf_r+0x20e>
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <_vfiprintf_r+0x22c>)
 8002c10:	bb1b      	cbnz	r3, 8002c5a <_vfiprintf_r+0x1da>
 8002c12:	9b03      	ldr	r3, [sp, #12]
 8002c14:	3307      	adds	r3, #7
 8002c16:	f023 0307 	bic.w	r3, r3, #7
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	9303      	str	r3, [sp, #12]
 8002c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c20:	443b      	add	r3, r7
 8002c22:	9309      	str	r3, [sp, #36]	; 0x24
 8002c24:	e768      	b.n	8002af8 <_vfiprintf_r+0x78>
 8002c26:	460c      	mov	r4, r1
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c2e:	e7a6      	b.n	8002b7e <_vfiprintf_r+0xfe>
 8002c30:	2300      	movs	r3, #0
 8002c32:	f04f 0c0a 	mov.w	ip, #10
 8002c36:	4619      	mov	r1, r3
 8002c38:	3401      	adds	r4, #1
 8002c3a:	9305      	str	r3, [sp, #20]
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c42:	3a30      	subs	r2, #48	; 0x30
 8002c44:	2a09      	cmp	r2, #9
 8002c46:	d903      	bls.n	8002c50 <_vfiprintf_r+0x1d0>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0c6      	beq.n	8002bda <_vfiprintf_r+0x15a>
 8002c4c:	9105      	str	r1, [sp, #20]
 8002c4e:	e7c4      	b.n	8002bda <_vfiprintf_r+0x15a>
 8002c50:	4604      	mov	r4, r0
 8002c52:	2301      	movs	r3, #1
 8002c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c58:	e7f0      	b.n	8002c3c <_vfiprintf_r+0x1bc>
 8002c5a:	ab03      	add	r3, sp, #12
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	462a      	mov	r2, r5
 8002c60:	4630      	mov	r0, r6
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_vfiprintf_r+0x230>)
 8002c64:	a904      	add	r1, sp, #16
 8002c66:	f3af 8000 	nop.w
 8002c6a:	4607      	mov	r7, r0
 8002c6c:	1c78      	adds	r0, r7, #1
 8002c6e:	d1d6      	bne.n	8002c1e <_vfiprintf_r+0x19e>
 8002c70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c72:	07d9      	lsls	r1, r3, #31
 8002c74:	d405      	bmi.n	8002c82 <_vfiprintf_r+0x202>
 8002c76:	89ab      	ldrh	r3, [r5, #12]
 8002c78:	059a      	lsls	r2, r3, #22
 8002c7a:	d402      	bmi.n	8002c82 <_vfiprintf_r+0x202>
 8002c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c7e:	f7ff fde2 	bl	8002846 <__retarget_lock_release_recursive>
 8002c82:	89ab      	ldrh	r3, [r5, #12]
 8002c84:	065b      	lsls	r3, r3, #25
 8002c86:	f53f af1d 	bmi.w	8002ac4 <_vfiprintf_r+0x44>
 8002c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c8c:	e71c      	b.n	8002ac8 <_vfiprintf_r+0x48>
 8002c8e:	ab03      	add	r3, sp, #12
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	462a      	mov	r2, r5
 8002c94:	4630      	mov	r0, r6
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <_vfiprintf_r+0x230>)
 8002c98:	a904      	add	r1, sp, #16
 8002c9a:	f000 f87d 	bl	8002d98 <_printf_i>
 8002c9e:	e7e4      	b.n	8002c6a <_vfiprintf_r+0x1ea>
 8002ca0:	08003416 	.word	0x08003416
 8002ca4:	0800341c 	.word	0x0800341c
 8002ca8:	08003420 	.word	0x08003420
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	08002a5b 	.word	0x08002a5b

08002cb4 <_printf_common>:
 8002cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb8:	4616      	mov	r6, r2
 8002cba:	4699      	mov	r9, r3
 8002cbc:	688a      	ldr	r2, [r1, #8]
 8002cbe:	690b      	ldr	r3, [r1, #16]
 8002cc0:	4607      	mov	r7, r0
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	bfb8      	it	lt
 8002cc6:	4613      	movlt	r3, r2
 8002cc8:	6033      	str	r3, [r6, #0]
 8002cca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cce:	460c      	mov	r4, r1
 8002cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd4:	b10a      	cbz	r2, 8002cda <_printf_common+0x26>
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	6033      	str	r3, [r6, #0]
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	0699      	lsls	r1, r3, #26
 8002cde:	bf42      	ittt	mi
 8002ce0:	6833      	ldrmi	r3, [r6, #0]
 8002ce2:	3302      	addmi	r3, #2
 8002ce4:	6033      	strmi	r3, [r6, #0]
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	f015 0506 	ands.w	r5, r5, #6
 8002cec:	d106      	bne.n	8002cfc <_printf_common+0x48>
 8002cee:	f104 0a19 	add.w	sl, r4, #25
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	6832      	ldr	r2, [r6, #0]
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	42ab      	cmp	r3, r5
 8002cfa:	dc2b      	bgt.n	8002d54 <_printf_common+0xa0>
 8002cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d00:	1e13      	subs	r3, r2, #0
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	bf18      	it	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	0692      	lsls	r2, r2, #26
 8002d0a:	d430      	bmi.n	8002d6e <_printf_common+0xba>
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	4638      	mov	r0, r7
 8002d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d14:	47c0      	blx	r8
 8002d16:	3001      	adds	r0, #1
 8002d18:	d023      	beq.n	8002d62 <_printf_common+0xae>
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	6922      	ldr	r2, [r4, #16]
 8002d1e:	f003 0306 	and.w	r3, r3, #6
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf14      	ite	ne
 8002d26:	2500      	movne	r5, #0
 8002d28:	6833      	ldreq	r3, [r6, #0]
 8002d2a:	f04f 0600 	mov.w	r6, #0
 8002d2e:	bf08      	it	eq
 8002d30:	68e5      	ldreq	r5, [r4, #12]
 8002d32:	f104 041a 	add.w	r4, r4, #26
 8002d36:	bf08      	it	eq
 8002d38:	1aed      	subeq	r5, r5, r3
 8002d3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d3e:	bf08      	it	eq
 8002d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bfc4      	itt	gt
 8002d48:	1a9b      	subgt	r3, r3, r2
 8002d4a:	18ed      	addgt	r5, r5, r3
 8002d4c:	42b5      	cmp	r5, r6
 8002d4e:	d11a      	bne.n	8002d86 <_printf_common+0xd2>
 8002d50:	2000      	movs	r0, #0
 8002d52:	e008      	b.n	8002d66 <_printf_common+0xb2>
 8002d54:	2301      	movs	r3, #1
 8002d56:	4652      	mov	r2, sl
 8002d58:	4649      	mov	r1, r9
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	47c0      	blx	r8
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d103      	bne.n	8002d6a <_printf_common+0xb6>
 8002d62:	f04f 30ff 	mov.w	r0, #4294967295
 8002d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	e7c1      	b.n	8002cf2 <_printf_common+0x3e>
 8002d6e:	2030      	movs	r0, #48	; 0x30
 8002d70:	18e1      	adds	r1, r4, r3
 8002d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7c:	4422      	add	r2, r4
 8002d7e:	3302      	adds	r3, #2
 8002d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d84:	e7c2      	b.n	8002d0c <_printf_common+0x58>
 8002d86:	2301      	movs	r3, #1
 8002d88:	4622      	mov	r2, r4
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	47c0      	blx	r8
 8002d90:	3001      	adds	r0, #1
 8002d92:	d0e6      	beq.n	8002d62 <_printf_common+0xae>
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7d9      	b.n	8002d4c <_printf_common+0x98>

08002d98 <_printf_i>:
 8002d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d9c:	7e0f      	ldrb	r7, [r1, #24]
 8002d9e:	4691      	mov	r9, r2
 8002da0:	2f78      	cmp	r7, #120	; 0x78
 8002da2:	4680      	mov	r8, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	469a      	mov	sl, r3
 8002da8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002dae:	d807      	bhi.n	8002dc0 <_printf_i+0x28>
 8002db0:	2f62      	cmp	r7, #98	; 0x62
 8002db2:	d80a      	bhi.n	8002dca <_printf_i+0x32>
 8002db4:	2f00      	cmp	r7, #0
 8002db6:	f000 80d5 	beq.w	8002f64 <_printf_i+0x1cc>
 8002dba:	2f58      	cmp	r7, #88	; 0x58
 8002dbc:	f000 80c1 	beq.w	8002f42 <_printf_i+0x1aa>
 8002dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc8:	e03a      	b.n	8002e40 <_printf_i+0xa8>
 8002dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dce:	2b15      	cmp	r3, #21
 8002dd0:	d8f6      	bhi.n	8002dc0 <_printf_i+0x28>
 8002dd2:	a101      	add	r1, pc, #4	; (adr r1, 8002dd8 <_printf_i+0x40>)
 8002dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dd8:	08002e31 	.word	0x08002e31
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002dc1 	.word	0x08002dc1
 8002de4:	08002dc1 	.word	0x08002dc1
 8002de8:	08002dc1 	.word	0x08002dc1
 8002dec:	08002dc1 	.word	0x08002dc1
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002dc1 	.word	0x08002dc1
 8002df8:	08002dc1 	.word	0x08002dc1
 8002dfc:	08002dc1 	.word	0x08002dc1
 8002e00:	08002dc1 	.word	0x08002dc1
 8002e04:	08002f4b 	.word	0x08002f4b
 8002e08:	08002e71 	.word	0x08002e71
 8002e0c:	08002f05 	.word	0x08002f05
 8002e10:	08002dc1 	.word	0x08002dc1
 8002e14:	08002dc1 	.word	0x08002dc1
 8002e18:	08002f6d 	.word	0x08002f6d
 8002e1c:	08002dc1 	.word	0x08002dc1
 8002e20:	08002e71 	.word	0x08002e71
 8002e24:	08002dc1 	.word	0x08002dc1
 8002e28:	08002dc1 	.word	0x08002dc1
 8002e2c:	08002f0d 	.word	0x08002f0d
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	602a      	str	r2, [r5, #0]
 8002e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0a0      	b.n	8002f86 <_printf_i+0x1ee>
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	682b      	ldr	r3, [r5, #0]
 8002e48:	0607      	lsls	r7, r0, #24
 8002e4a:	f103 0104 	add.w	r1, r3, #4
 8002e4e:	6029      	str	r1, [r5, #0]
 8002e50:	d501      	bpl.n	8002e56 <_printf_i+0xbe>
 8002e52:	681e      	ldr	r6, [r3, #0]
 8002e54:	e003      	b.n	8002e5e <_printf_i+0xc6>
 8002e56:	0646      	lsls	r6, r0, #25
 8002e58:	d5fb      	bpl.n	8002e52 <_printf_i+0xba>
 8002e5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e5e:	2e00      	cmp	r6, #0
 8002e60:	da03      	bge.n	8002e6a <_printf_i+0xd2>
 8002e62:	232d      	movs	r3, #45	; 0x2d
 8002e64:	4276      	negs	r6, r6
 8002e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	4859      	ldr	r0, [pc, #356]	; (8002fd4 <_printf_i+0x23c>)
 8002e6e:	e012      	b.n	8002e96 <_printf_i+0xfe>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	1d19      	adds	r1, r3, #4
 8002e76:	6029      	str	r1, [r5, #0]
 8002e78:	0605      	lsls	r5, r0, #24
 8002e7a:	d501      	bpl.n	8002e80 <_printf_i+0xe8>
 8002e7c:	681e      	ldr	r6, [r3, #0]
 8002e7e:	e002      	b.n	8002e86 <_printf_i+0xee>
 8002e80:	0641      	lsls	r1, r0, #25
 8002e82:	d5fb      	bpl.n	8002e7c <_printf_i+0xe4>
 8002e84:	881e      	ldrh	r6, [r3, #0]
 8002e86:	2f6f      	cmp	r7, #111	; 0x6f
 8002e88:	bf0c      	ite	eq
 8002e8a:	2308      	moveq	r3, #8
 8002e8c:	230a      	movne	r3, #10
 8002e8e:	4851      	ldr	r0, [pc, #324]	; (8002fd4 <_printf_i+0x23c>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e96:	6865      	ldr	r5, [r4, #4]
 8002e98:	2d00      	cmp	r5, #0
 8002e9a:	bfa8      	it	ge
 8002e9c:	6821      	ldrge	r1, [r4, #0]
 8002e9e:	60a5      	str	r5, [r4, #8]
 8002ea0:	bfa4      	itt	ge
 8002ea2:	f021 0104 	bicge.w	r1, r1, #4
 8002ea6:	6021      	strge	r1, [r4, #0]
 8002ea8:	b90e      	cbnz	r6, 8002eae <_printf_i+0x116>
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d04b      	beq.n	8002f46 <_printf_i+0x1ae>
 8002eae:	4615      	mov	r5, r2
 8002eb0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002eb4:	fb03 6711 	mls	r7, r3, r1, r6
 8002eb8:	5dc7      	ldrb	r7, [r0, r7]
 8002eba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ebe:	4637      	mov	r7, r6
 8002ec0:	42bb      	cmp	r3, r7
 8002ec2:	460e      	mov	r6, r1
 8002ec4:	d9f4      	bls.n	8002eb0 <_printf_i+0x118>
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d10b      	bne.n	8002ee2 <_printf_i+0x14a>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	07de      	lsls	r6, r3, #31
 8002ece:	d508      	bpl.n	8002ee2 <_printf_i+0x14a>
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	6861      	ldr	r1, [r4, #4]
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	bfde      	ittt	le
 8002ed8:	2330      	movle	r3, #48	; 0x30
 8002eda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ede:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ee2:	1b52      	subs	r2, r2, r5
 8002ee4:	6122      	str	r2, [r4, #16]
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	4621      	mov	r1, r4
 8002eea:	4640      	mov	r0, r8
 8002eec:	f8cd a000 	str.w	sl, [sp]
 8002ef0:	aa03      	add	r2, sp, #12
 8002ef2:	f7ff fedf 	bl	8002cb4 <_printf_common>
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d14a      	bne.n	8002f90 <_printf_i+0x1f8>
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	b004      	add	sp, #16
 8002f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	f043 0320 	orr.w	r3, r3, #32
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	2778      	movs	r7, #120	; 0x78
 8002f0e:	4832      	ldr	r0, [pc, #200]	; (8002fd8 <_printf_i+0x240>)
 8002f10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	6829      	ldr	r1, [r5, #0]
 8002f18:	061f      	lsls	r7, r3, #24
 8002f1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f1e:	d402      	bmi.n	8002f26 <_printf_i+0x18e>
 8002f20:	065f      	lsls	r7, r3, #25
 8002f22:	bf48      	it	mi
 8002f24:	b2b6      	uxthmi	r6, r6
 8002f26:	07df      	lsls	r7, r3, #31
 8002f28:	bf48      	it	mi
 8002f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8002f2e:	6029      	str	r1, [r5, #0]
 8002f30:	bf48      	it	mi
 8002f32:	6023      	strmi	r3, [r4, #0]
 8002f34:	b91e      	cbnz	r6, 8002f3e <_printf_i+0x1a6>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	f023 0320 	bic.w	r3, r3, #32
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	2310      	movs	r3, #16
 8002f40:	e7a6      	b.n	8002e90 <_printf_i+0xf8>
 8002f42:	4824      	ldr	r0, [pc, #144]	; (8002fd4 <_printf_i+0x23c>)
 8002f44:	e7e4      	b.n	8002f10 <_printf_i+0x178>
 8002f46:	4615      	mov	r5, r2
 8002f48:	e7bd      	b.n	8002ec6 <_printf_i+0x12e>
 8002f4a:	682b      	ldr	r3, [r5, #0]
 8002f4c:	6826      	ldr	r6, [r4, #0]
 8002f4e:	1d18      	adds	r0, r3, #4
 8002f50:	6961      	ldr	r1, [r4, #20]
 8002f52:	6028      	str	r0, [r5, #0]
 8002f54:	0635      	lsls	r5, r6, #24
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	d501      	bpl.n	8002f5e <_printf_i+0x1c6>
 8002f5a:	6019      	str	r1, [r3, #0]
 8002f5c:	e002      	b.n	8002f64 <_printf_i+0x1cc>
 8002f5e:	0670      	lsls	r0, r6, #25
 8002f60:	d5fb      	bpl.n	8002f5a <_printf_i+0x1c2>
 8002f62:	8019      	strh	r1, [r3, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	4615      	mov	r5, r2
 8002f68:	6123      	str	r3, [r4, #16]
 8002f6a:	e7bc      	b.n	8002ee6 <_printf_i+0x14e>
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	1d1a      	adds	r2, r3, #4
 8002f72:	602a      	str	r2, [r5, #0]
 8002f74:	681d      	ldr	r5, [r3, #0]
 8002f76:	6862      	ldr	r2, [r4, #4]
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f97f 	bl	800327c <memchr>
 8002f7e:	b108      	cbz	r0, 8002f84 <_printf_i+0x1ec>
 8002f80:	1b40      	subs	r0, r0, r5
 8002f82:	6060      	str	r0, [r4, #4]
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	6123      	str	r3, [r4, #16]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f8e:	e7aa      	b.n	8002ee6 <_printf_i+0x14e>
 8002f90:	462a      	mov	r2, r5
 8002f92:	4649      	mov	r1, r9
 8002f94:	4640      	mov	r0, r8
 8002f96:	6923      	ldr	r3, [r4, #16]
 8002f98:	47d0      	blx	sl
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d0ad      	beq.n	8002efa <_printf_i+0x162>
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	079b      	lsls	r3, r3, #30
 8002fa2:	d413      	bmi.n	8002fcc <_printf_i+0x234>
 8002fa4:	68e0      	ldr	r0, [r4, #12]
 8002fa6:	9b03      	ldr	r3, [sp, #12]
 8002fa8:	4298      	cmp	r0, r3
 8002faa:	bfb8      	it	lt
 8002fac:	4618      	movlt	r0, r3
 8002fae:	e7a6      	b.n	8002efe <_printf_i+0x166>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	47d0      	blx	sl
 8002fba:	3001      	adds	r0, #1
 8002fbc:	d09d      	beq.n	8002efa <_printf_i+0x162>
 8002fbe:	3501      	adds	r5, #1
 8002fc0:	68e3      	ldr	r3, [r4, #12]
 8002fc2:	9903      	ldr	r1, [sp, #12]
 8002fc4:	1a5b      	subs	r3, r3, r1
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	dcf2      	bgt.n	8002fb0 <_printf_i+0x218>
 8002fca:	e7eb      	b.n	8002fa4 <_printf_i+0x20c>
 8002fcc:	2500      	movs	r5, #0
 8002fce:	f104 0619 	add.w	r6, r4, #25
 8002fd2:	e7f5      	b.n	8002fc0 <_printf_i+0x228>
 8002fd4:	08003427 	.word	0x08003427
 8002fd8:	08003438 	.word	0x08003438

08002fdc <__sflush_r>:
 8002fdc:	898a      	ldrh	r2, [r1, #12]
 8002fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	0710      	lsls	r0, r2, #28
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	d457      	bmi.n	8003098 <__sflush_r+0xbc>
 8002fe8:	684b      	ldr	r3, [r1, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	dc04      	bgt.n	8002ff8 <__sflush_r+0x1c>
 8002fee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	dc01      	bgt.n	8002ff8 <__sflush_r+0x1c>
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ffa:	2e00      	cmp	r6, #0
 8002ffc:	d0fa      	beq.n	8002ff4 <__sflush_r+0x18>
 8002ffe:	2300      	movs	r3, #0
 8003000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003004:	682f      	ldr	r7, [r5, #0]
 8003006:	6a21      	ldr	r1, [r4, #32]
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	d032      	beq.n	8003072 <__sflush_r+0x96>
 800300c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	075a      	lsls	r2, r3, #29
 8003012:	d505      	bpl.n	8003020 <__sflush_r+0x44>
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	1ac0      	subs	r0, r0, r3
 8003018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800301a:	b10b      	cbz	r3, 8003020 <__sflush_r+0x44>
 800301c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800301e:	1ac0      	subs	r0, r0, r3
 8003020:	2300      	movs	r3, #0
 8003022:	4602      	mov	r2, r0
 8003024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003026:	4628      	mov	r0, r5
 8003028:	6a21      	ldr	r1, [r4, #32]
 800302a:	47b0      	blx	r6
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	89a3      	ldrh	r3, [r4, #12]
 8003030:	d106      	bne.n	8003040 <__sflush_r+0x64>
 8003032:	6829      	ldr	r1, [r5, #0]
 8003034:	291d      	cmp	r1, #29
 8003036:	d82b      	bhi.n	8003090 <__sflush_r+0xb4>
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <__sflush_r+0x100>)
 800303a:	410a      	asrs	r2, r1
 800303c:	07d6      	lsls	r6, r2, #31
 800303e:	d427      	bmi.n	8003090 <__sflush_r+0xb4>
 8003040:	2200      	movs	r2, #0
 8003042:	6062      	str	r2, [r4, #4]
 8003044:	6922      	ldr	r2, [r4, #16]
 8003046:	04d9      	lsls	r1, r3, #19
 8003048:	6022      	str	r2, [r4, #0]
 800304a:	d504      	bpl.n	8003056 <__sflush_r+0x7a>
 800304c:	1c42      	adds	r2, r0, #1
 800304e:	d101      	bne.n	8003054 <__sflush_r+0x78>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	b903      	cbnz	r3, 8003056 <__sflush_r+0x7a>
 8003054:	6560      	str	r0, [r4, #84]	; 0x54
 8003056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003058:	602f      	str	r7, [r5, #0]
 800305a:	2900      	cmp	r1, #0
 800305c:	d0ca      	beq.n	8002ff4 <__sflush_r+0x18>
 800305e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003062:	4299      	cmp	r1, r3
 8003064:	d002      	beq.n	800306c <__sflush_r+0x90>
 8003066:	4628      	mov	r0, r5
 8003068:	f7ff fbee 	bl	8002848 <_free_r>
 800306c:	2000      	movs	r0, #0
 800306e:	6360      	str	r0, [r4, #52]	; 0x34
 8003070:	e7c1      	b.n	8002ff6 <__sflush_r+0x1a>
 8003072:	2301      	movs	r3, #1
 8003074:	4628      	mov	r0, r5
 8003076:	47b0      	blx	r6
 8003078:	1c41      	adds	r1, r0, #1
 800307a:	d1c8      	bne.n	800300e <__sflush_r+0x32>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0c5      	beq.n	800300e <__sflush_r+0x32>
 8003082:	2b1d      	cmp	r3, #29
 8003084:	d001      	beq.n	800308a <__sflush_r+0xae>
 8003086:	2b16      	cmp	r3, #22
 8003088:	d101      	bne.n	800308e <__sflush_r+0xb2>
 800308a:	602f      	str	r7, [r5, #0]
 800308c:	e7b2      	b.n	8002ff4 <__sflush_r+0x18>
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	e7ae      	b.n	8002ff6 <__sflush_r+0x1a>
 8003098:	690f      	ldr	r7, [r1, #16]
 800309a:	2f00      	cmp	r7, #0
 800309c:	d0aa      	beq.n	8002ff4 <__sflush_r+0x18>
 800309e:	0793      	lsls	r3, r2, #30
 80030a0:	bf18      	it	ne
 80030a2:	2300      	movne	r3, #0
 80030a4:	680e      	ldr	r6, [r1, #0]
 80030a6:	bf08      	it	eq
 80030a8:	694b      	ldreq	r3, [r1, #20]
 80030aa:	1bf6      	subs	r6, r6, r7
 80030ac:	600f      	str	r7, [r1, #0]
 80030ae:	608b      	str	r3, [r1, #8]
 80030b0:	2e00      	cmp	r6, #0
 80030b2:	dd9f      	ble.n	8002ff4 <__sflush_r+0x18>
 80030b4:	4633      	mov	r3, r6
 80030b6:	463a      	mov	r2, r7
 80030b8:	4628      	mov	r0, r5
 80030ba:	6a21      	ldr	r1, [r4, #32]
 80030bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80030c0:	47e0      	blx	ip
 80030c2:	2800      	cmp	r0, #0
 80030c4:	dc06      	bgt.n	80030d4 <__sflush_r+0xf8>
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	e790      	b.n	8002ff6 <__sflush_r+0x1a>
 80030d4:	4407      	add	r7, r0
 80030d6:	1a36      	subs	r6, r6, r0
 80030d8:	e7ea      	b.n	80030b0 <__sflush_r+0xd4>
 80030da:	bf00      	nop
 80030dc:	dfbffffe 	.word	0xdfbffffe

080030e0 <_fflush_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	690b      	ldr	r3, [r1, #16]
 80030e4:	4605      	mov	r5, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	b913      	cbnz	r3, 80030f0 <_fflush_r+0x10>
 80030ea:	2500      	movs	r5, #0
 80030ec:	4628      	mov	r0, r5
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	b118      	cbz	r0, 80030fa <_fflush_r+0x1a>
 80030f2:	6a03      	ldr	r3, [r0, #32]
 80030f4:	b90b      	cbnz	r3, 80030fa <_fflush_r+0x1a>
 80030f6:	f7ff faa1 	bl	800263c <__sinit>
 80030fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f3      	beq.n	80030ea <_fflush_r+0xa>
 8003102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003104:	07d0      	lsls	r0, r2, #31
 8003106:	d404      	bmi.n	8003112 <_fflush_r+0x32>
 8003108:	0599      	lsls	r1, r3, #22
 800310a:	d402      	bmi.n	8003112 <_fflush_r+0x32>
 800310c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310e:	f7ff fb99 	bl	8002844 <__retarget_lock_acquire_recursive>
 8003112:	4628      	mov	r0, r5
 8003114:	4621      	mov	r1, r4
 8003116:	f7ff ff61 	bl	8002fdc <__sflush_r>
 800311a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311c:	4605      	mov	r5, r0
 800311e:	07da      	lsls	r2, r3, #31
 8003120:	d4e4      	bmi.n	80030ec <_fflush_r+0xc>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	059b      	lsls	r3, r3, #22
 8003126:	d4e1      	bmi.n	80030ec <_fflush_r+0xc>
 8003128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312a:	f7ff fb8c 	bl	8002846 <__retarget_lock_release_recursive>
 800312e:	e7dd      	b.n	80030ec <_fflush_r+0xc>

08003130 <__swbuf_r>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	460e      	mov	r6, r1
 8003134:	4614      	mov	r4, r2
 8003136:	4605      	mov	r5, r0
 8003138:	b118      	cbz	r0, 8003142 <__swbuf_r+0x12>
 800313a:	6a03      	ldr	r3, [r0, #32]
 800313c:	b90b      	cbnz	r3, 8003142 <__swbuf_r+0x12>
 800313e:	f7ff fa7d 	bl	800263c <__sinit>
 8003142:	69a3      	ldr	r3, [r4, #24]
 8003144:	60a3      	str	r3, [r4, #8]
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	071a      	lsls	r2, r3, #28
 800314a:	d525      	bpl.n	8003198 <__swbuf_r+0x68>
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	b31b      	cbz	r3, 8003198 <__swbuf_r+0x68>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	6922      	ldr	r2, [r4, #16]
 8003154:	b2f6      	uxtb	r6, r6
 8003156:	1a98      	subs	r0, r3, r2
 8003158:	6963      	ldr	r3, [r4, #20]
 800315a:	4637      	mov	r7, r6
 800315c:	4283      	cmp	r3, r0
 800315e:	dc04      	bgt.n	800316a <__swbuf_r+0x3a>
 8003160:	4621      	mov	r1, r4
 8003162:	4628      	mov	r0, r5
 8003164:	f7ff ffbc 	bl	80030e0 <_fflush_r>
 8003168:	b9e0      	cbnz	r0, 80031a4 <__swbuf_r+0x74>
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	3b01      	subs	r3, #1
 800316e:	60a3      	str	r3, [r4, #8]
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	701e      	strb	r6, [r3, #0]
 8003178:	6962      	ldr	r2, [r4, #20]
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	429a      	cmp	r2, r3
 800317e:	d004      	beq.n	800318a <__swbuf_r+0x5a>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	07db      	lsls	r3, r3, #31
 8003184:	d506      	bpl.n	8003194 <__swbuf_r+0x64>
 8003186:	2e0a      	cmp	r6, #10
 8003188:	d104      	bne.n	8003194 <__swbuf_r+0x64>
 800318a:	4621      	mov	r1, r4
 800318c:	4628      	mov	r0, r5
 800318e:	f7ff ffa7 	bl	80030e0 <_fflush_r>
 8003192:	b938      	cbnz	r0, 80031a4 <__swbuf_r+0x74>
 8003194:	4638      	mov	r0, r7
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	4621      	mov	r1, r4
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f806 	bl	80031ac <__swsetup_r>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0d5      	beq.n	8003150 <__swbuf_r+0x20>
 80031a4:	f04f 37ff 	mov.w	r7, #4294967295
 80031a8:	e7f4      	b.n	8003194 <__swbuf_r+0x64>
	...

080031ac <__swsetup_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <__swsetup_r+0xac>)
 80031b0:	4605      	mov	r5, r0
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	460c      	mov	r4, r1
 80031b6:	b118      	cbz	r0, 80031c0 <__swsetup_r+0x14>
 80031b8:	6a03      	ldr	r3, [r0, #32]
 80031ba:	b90b      	cbnz	r3, 80031c0 <__swsetup_r+0x14>
 80031bc:	f7ff fa3e 	bl	800263c <__sinit>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031c6:	0718      	lsls	r0, r3, #28
 80031c8:	d422      	bmi.n	8003210 <__swsetup_r+0x64>
 80031ca:	06d9      	lsls	r1, r3, #27
 80031cc:	d407      	bmi.n	80031de <__swsetup_r+0x32>
 80031ce:	2309      	movs	r3, #9
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031d6:	f04f 30ff 	mov.w	r0, #4294967295
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	e034      	b.n	8003248 <__swsetup_r+0x9c>
 80031de:	0758      	lsls	r0, r3, #29
 80031e0:	d512      	bpl.n	8003208 <__swsetup_r+0x5c>
 80031e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031e4:	b141      	cbz	r1, 80031f8 <__swsetup_r+0x4c>
 80031e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031ea:	4299      	cmp	r1, r3
 80031ec:	d002      	beq.n	80031f4 <__swsetup_r+0x48>
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff fb2a 	bl	8002848 <_free_r>
 80031f4:	2300      	movs	r3, #0
 80031f6:	6363      	str	r3, [r4, #52]	; 0x34
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031fe:	81a3      	strh	r3, [r4, #12]
 8003200:	2300      	movs	r3, #0
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	b94b      	cbnz	r3, 8003228 <__swsetup_r+0x7c>
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800321a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321e:	d003      	beq.n	8003228 <__swsetup_r+0x7c>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f85d 	bl	80032e2 <__smakebuf_r>
 8003228:	89a0      	ldrh	r0, [r4, #12]
 800322a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800322e:	f010 0301 	ands.w	r3, r0, #1
 8003232:	d00a      	beq.n	800324a <__swsetup_r+0x9e>
 8003234:	2300      	movs	r3, #0
 8003236:	60a3      	str	r3, [r4, #8]
 8003238:	6963      	ldr	r3, [r4, #20]
 800323a:	425b      	negs	r3, r3
 800323c:	61a3      	str	r3, [r4, #24]
 800323e:	6923      	ldr	r3, [r4, #16]
 8003240:	b943      	cbnz	r3, 8003254 <__swsetup_r+0xa8>
 8003242:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003246:	d1c4      	bne.n	80031d2 <__swsetup_r+0x26>
 8003248:	bd38      	pop	{r3, r4, r5, pc}
 800324a:	0781      	lsls	r1, r0, #30
 800324c:	bf58      	it	pl
 800324e:	6963      	ldrpl	r3, [r4, #20]
 8003250:	60a3      	str	r3, [r4, #8]
 8003252:	e7f4      	b.n	800323e <__swsetup_r+0x92>
 8003254:	2000      	movs	r0, #0
 8003256:	e7f7      	b.n	8003248 <__swsetup_r+0x9c>
 8003258:	20000064 	.word	0x20000064

0800325c <_sbrk_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	2300      	movs	r3, #0
 8003260:	4d05      	ldr	r5, [pc, #20]	; (8003278 <_sbrk_r+0x1c>)
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	f7fd fa0c 	bl	8000684 <_sbrk>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_sbrk_r+0x1a>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_sbrk_r+0x1a>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	20000240 	.word	0x20000240

0800327c <memchr>:
 800327c:	4603      	mov	r3, r0
 800327e:	b510      	push	{r4, lr}
 8003280:	b2c9      	uxtb	r1, r1
 8003282:	4402      	add	r2, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	4618      	mov	r0, r3
 8003288:	d101      	bne.n	800328e <memchr+0x12>
 800328a:	2000      	movs	r0, #0
 800328c:	e003      	b.n	8003296 <memchr+0x1a>
 800328e:	7804      	ldrb	r4, [r0, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	428c      	cmp	r4, r1
 8003294:	d1f6      	bne.n	8003284 <memchr+0x8>
 8003296:	bd10      	pop	{r4, pc}

08003298 <__swhatbuf_r>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	460c      	mov	r4, r1
 800329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a0:	4615      	mov	r5, r2
 80032a2:	2900      	cmp	r1, #0
 80032a4:	461e      	mov	r6, r3
 80032a6:	b096      	sub	sp, #88	; 0x58
 80032a8:	da0c      	bge.n	80032c4 <__swhatbuf_r+0x2c>
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	2100      	movs	r1, #0
 80032ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032b2:	bf0c      	ite	eq
 80032b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80032b8:	2340      	movne	r3, #64	; 0x40
 80032ba:	2000      	movs	r0, #0
 80032bc:	6031      	str	r1, [r6, #0]
 80032be:	602b      	str	r3, [r5, #0]
 80032c0:	b016      	add	sp, #88	; 0x58
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	466a      	mov	r2, sp
 80032c6:	f000 f849 	bl	800335c <_fstat_r>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	dbed      	blt.n	80032aa <__swhatbuf_r+0x12>
 80032ce:	9901      	ldr	r1, [sp, #4]
 80032d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80032d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80032d8:	4259      	negs	r1, r3
 80032da:	4159      	adcs	r1, r3
 80032dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e0:	e7eb      	b.n	80032ba <__swhatbuf_r+0x22>

080032e2 <__smakebuf_r>:
 80032e2:	898b      	ldrh	r3, [r1, #12]
 80032e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032e6:	079d      	lsls	r5, r3, #30
 80032e8:	4606      	mov	r6, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	d507      	bpl.n	80032fe <__smakebuf_r+0x1c>
 80032ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	6123      	str	r3, [r4, #16]
 80032f6:	2301      	movs	r3, #1
 80032f8:	6163      	str	r3, [r4, #20]
 80032fa:	b002      	add	sp, #8
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	466a      	mov	r2, sp
 8003300:	ab01      	add	r3, sp, #4
 8003302:	f7ff ffc9 	bl	8003298 <__swhatbuf_r>
 8003306:	9900      	ldr	r1, [sp, #0]
 8003308:	4605      	mov	r5, r0
 800330a:	4630      	mov	r0, r6
 800330c:	f7ff fb04 	bl	8002918 <_malloc_r>
 8003310:	b948      	cbnz	r0, 8003326 <__smakebuf_r+0x44>
 8003312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003316:	059a      	lsls	r2, r3, #22
 8003318:	d4ef      	bmi.n	80032fa <__smakebuf_r+0x18>
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	e7e3      	b.n	80032ee <__smakebuf_r+0xc>
 8003326:	89a3      	ldrh	r3, [r4, #12]
 8003328:	6020      	str	r0, [r4, #0]
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	9b00      	ldr	r3, [sp, #0]
 8003332:	6120      	str	r0, [r4, #16]
 8003334:	6163      	str	r3, [r4, #20]
 8003336:	9b01      	ldr	r3, [sp, #4]
 8003338:	b15b      	cbz	r3, 8003352 <__smakebuf_r+0x70>
 800333a:	4630      	mov	r0, r6
 800333c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003340:	f000 f81e 	bl	8003380 <_isatty_r>
 8003344:	b128      	cbz	r0, 8003352 <__smakebuf_r+0x70>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	f023 0303 	bic.w	r3, r3, #3
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	81a3      	strh	r3, [r4, #12]
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	431d      	orrs	r5, r3
 8003356:	81a5      	strh	r5, [r4, #12]
 8003358:	e7cf      	b.n	80032fa <__smakebuf_r+0x18>
	...

0800335c <_fstat_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	2300      	movs	r3, #0
 8003360:	4d06      	ldr	r5, [pc, #24]	; (800337c <_fstat_r+0x20>)
 8003362:	4604      	mov	r4, r0
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	f7fd f965 	bl	8000638 <_fstat>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	d102      	bne.n	8003378 <_fstat_r+0x1c>
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	b103      	cbz	r3, 8003378 <_fstat_r+0x1c>
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	20000240 	.word	0x20000240

08003380 <_isatty_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	; (800339c <_isatty_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd f963 	bl	8000656 <_isatty>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_isatty_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_isatty_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000240 	.word	0x20000240

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
